/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Cloud Cabinet Service API
 * 提供云托管服务的相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.jdccs.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.jdccs.model.DescribeMetricDataRequest;
import com.jdcloud.sdk.service.jdccs.model.DescribeMetricDataResponse;
import com.jdcloud.sdk.service.jdccs.client.DescribeMetricDataExecutor;
import com.jdcloud.sdk.service.jdccs.model.LastDownsampleRequest;
import com.jdcloud.sdk.service.jdccs.model.LastDownsampleResponse;
import com.jdcloud.sdk.service.jdccs.client.LastDownsampleExecutor;
import com.jdcloud.sdk.service.jdccs.model.DescribeIdcsRequest;
import com.jdcloud.sdk.service.jdccs.model.DescribeIdcsResponse;
import com.jdcloud.sdk.service.jdccs.client.DescribeIdcsExecutor;
import com.jdcloud.sdk.service.jdccs.model.DescribeCabinetsRequest;
import com.jdcloud.sdk.service.jdccs.model.DescribeCabinetsResponse;
import com.jdcloud.sdk.service.jdccs.client.DescribeCabinetsExecutor;
import com.jdcloud.sdk.service.jdccs.model.DescribeMetricsRequest;
import com.jdcloud.sdk.service.jdccs.model.DescribeMetricsResponse;
import com.jdcloud.sdk.service.jdccs.client.DescribeMetricsExecutor;
import com.jdcloud.sdk.service.jdccs.model.DescribeRoomsRequest;
import com.jdcloud.sdk.service.jdccs.model.DescribeRoomsResponse;
import com.jdcloud.sdk.service.jdccs.client.DescribeRoomsExecutor;

/**
 * jdccsClient
 */
public class JdccsClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.0";
    public final static String DefaultEndpoint = "jdccs.jdcloud-api.com";
    public final static String ServiceName = "jdccs";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private JdccsClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查看某资源单个监控项数据
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMetricDataResponse describeMetricData(DescribeMetricDataRequest request) throws JdcloudSdkException {
        return new DescribeMetricDataExecutor().client(this).execute(request);
    }

    /**
     * 查看某资源的最后一个监控数据点
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public LastDownsampleResponse lastDownsample(LastDownsampleRequest request) throws JdcloudSdkException {
        return new LastDownsampleExecutor().client(this).execute(request);
    }

    /**
     * 查询IDC机房列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeIdcsResponse describeIdcs(DescribeIdcsRequest request) throws JdcloudSdkException {
        return new DescribeIdcsExecutor().client(this).execute(request);
    }

    /**
     * 查询机柜列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeCabinetsResponse describeCabinets(DescribeCabinetsRequest request) throws JdcloudSdkException {
        return new DescribeCabinetsExecutor().client(this).execute(request);
    }

    /**
     * 查询可用监控项列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMetricsResponse describeMetrics(DescribeMetricsRequest request) throws JdcloudSdkException {
        return new DescribeMetricsExecutor().client(this).execute(request);
    }

    /**
     * 查询机房房间号列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeRoomsResponse describeRooms(DescribeRoomsRequest request) throws JdcloudSdkException {
        return new DescribeRoomsExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public JdccsClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private JdccsClient jdccsClient;

        public DefaultBuilder() {
            jdccsClient = new JdccsClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            jdccsClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            jdccsClient.httpRequestConfig = config;
            return this;
        }

        public JdccsClient build() throws JdcloudSdkException {

            if (jdccsClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                jdccsClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (jdccsClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("JdccsClient build error: jdcloud credentials provider not set");
                }
            }
            if (jdccsClient.httpRequestConfig == null) {
                jdccsClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (jdccsClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("JdccsClient build error: http request config not set");
                }
            }
            return jdccsClient;
        }

        public Builder environment(Environment environment) {
            jdccsClient.environment = environment;
            return this;
        }
    }
}
