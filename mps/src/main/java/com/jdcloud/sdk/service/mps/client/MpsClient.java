/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 媒体处理 API
 * 媒体处理相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.mps.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.mps.model.ListTranscodeJobsRequest;
import com.jdcloud.sdk.service.mps.model.ListTranscodeJobsResponse;
import com.jdcloud.sdk.service.mps.client.ListTranscodeJobsExecutor;
import com.jdcloud.sdk.service.mps.model.GetImageStyleRequest;
import com.jdcloud.sdk.service.mps.model.GetImageStyleResponse;
import com.jdcloud.sdk.service.mps.client.GetImageStyleExecutor;
import com.jdcloud.sdk.service.mps.model.SubmitTranscodeJobRequest;
import com.jdcloud.sdk.service.mps.model.SubmitTranscodeJobResponse;
import com.jdcloud.sdk.service.mps.client.SubmitTranscodeJobExecutor;
import com.jdcloud.sdk.service.mps.model.UpdateImageStyleRequest;
import com.jdcloud.sdk.service.mps.model.UpdateImageStyleResponse;
import com.jdcloud.sdk.service.mps.client.UpdateImageStyleExecutor;
import com.jdcloud.sdk.service.mps.model.GetTranscodeTemplateRequest;
import com.jdcloud.sdk.service.mps.model.GetTranscodeTemplateResponse;
import com.jdcloud.sdk.service.mps.client.GetTranscodeTemplateExecutor;
import com.jdcloud.sdk.service.mps.model.DeleteImageStyleRequest;
import com.jdcloud.sdk.service.mps.model.DeleteImageStyleResponse;
import com.jdcloud.sdk.service.mps.client.DeleteImageStyleExecutor;
import com.jdcloud.sdk.service.mps.model.CountImageStyleRequest;
import com.jdcloud.sdk.service.mps.model.CountImageStyleResponse;
import com.jdcloud.sdk.service.mps.client.CountImageStyleExecutor;
import com.jdcloud.sdk.service.mps.model.CreateTranscodeTemplateRequest;
import com.jdcloud.sdk.service.mps.model.CreateTranscodeTemplateResponse;
import com.jdcloud.sdk.service.mps.client.CreateTranscodeTemplateExecutor;
import com.jdcloud.sdk.service.mps.model.CreateThumbnailTaskRequest;
import com.jdcloud.sdk.service.mps.model.CreateThumbnailTaskResponse;
import com.jdcloud.sdk.service.mps.client.CreateThumbnailTaskExecutor;
import com.jdcloud.sdk.service.mps.model.GetTranscodeJobRequest;
import com.jdcloud.sdk.service.mps.model.GetTranscodeJobResponse;
import com.jdcloud.sdk.service.mps.client.GetTranscodeJobExecutor;
import com.jdcloud.sdk.service.mps.model.ListThumbnailTaskRequest;
import com.jdcloud.sdk.service.mps.model.ListThumbnailTaskResponse;
import com.jdcloud.sdk.service.mps.client.ListThumbnailTaskExecutor;
import com.jdcloud.sdk.service.mps.model.DeleteStyleDelimiterRequest;
import com.jdcloud.sdk.service.mps.model.DeleteStyleDelimiterResponse;
import com.jdcloud.sdk.service.mps.client.DeleteStyleDelimiterExecutor;
import com.jdcloud.sdk.service.mps.model.GetNotificationRequest;
import com.jdcloud.sdk.service.mps.model.GetNotificationResponse;
import com.jdcloud.sdk.service.mps.client.GetNotificationExecutor;
import com.jdcloud.sdk.service.mps.model.ModifyTranscodeTemplateRequest;
import com.jdcloud.sdk.service.mps.model.ModifyTranscodeTemplateResponse;
import com.jdcloud.sdk.service.mps.client.ModifyTranscodeTemplateExecutor;
import com.jdcloud.sdk.service.mps.model.GetThumbnailTaskRequest;
import com.jdcloud.sdk.service.mps.model.GetThumbnailTaskResponse;
import com.jdcloud.sdk.service.mps.client.GetThumbnailTaskExecutor;
import com.jdcloud.sdk.service.mps.model.SetNotificationRequest;
import com.jdcloud.sdk.service.mps.model.SetNotificationResponse;
import com.jdcloud.sdk.service.mps.client.SetNotificationExecutor;
import com.jdcloud.sdk.service.mps.model.SetStyleDelimiterRequest;
import com.jdcloud.sdk.service.mps.model.SetStyleDelimiterResponse;
import com.jdcloud.sdk.service.mps.client.SetStyleDelimiterExecutor;
import com.jdcloud.sdk.service.mps.model.GetStyleDelimiterRequest;
import com.jdcloud.sdk.service.mps.model.GetStyleDelimiterResponse;
import com.jdcloud.sdk.service.mps.client.GetStyleDelimiterExecutor;
import com.jdcloud.sdk.service.mps.model.ListTranscodeTemplatesRequest;
import com.jdcloud.sdk.service.mps.model.ListTranscodeTemplatesResponse;
import com.jdcloud.sdk.service.mps.client.ListTranscodeTemplatesExecutor;
import com.jdcloud.sdk.service.mps.model.CreateImageStyleRequest;
import com.jdcloud.sdk.service.mps.model.CreateImageStyleResponse;
import com.jdcloud.sdk.service.mps.client.CreateImageStyleExecutor;
import com.jdcloud.sdk.service.mps.model.UpdateTranscodeTemplateRequest;
import com.jdcloud.sdk.service.mps.model.UpdateTranscodeTemplateResponse;
import com.jdcloud.sdk.service.mps.client.UpdateTranscodeTemplateExecutor;
import com.jdcloud.sdk.service.mps.model.ListImageStyleRequest;
import com.jdcloud.sdk.service.mps.model.ListImageStyleResponse;
import com.jdcloud.sdk.service.mps.client.ListImageStyleExecutor;
import com.jdcloud.sdk.service.mps.model.DeleteTranscodeTemplateRequest;
import com.jdcloud.sdk.service.mps.model.DeleteTranscodeTemplateResponse;
import com.jdcloud.sdk.service.mps.client.DeleteTranscodeTemplateExecutor;

/**
 * mpsClient
 */
public class MpsClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.1";
    public final static String DefaultEndpoint = "mps.jdcloud-api.com";
    public final static String ServiceName = "mps";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private MpsClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查询转码作业列表。
支持如下过滤器：
- title[eq] 按照输入视频标题进行精确匹配

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListTranscodeJobsResponse listTranscodeJobs(ListTranscodeJobsRequest request) throws JdcloudSdkException {
        return new ListTranscodeJobsExecutor().client(this).execute(request);
    }

    /**
     * 图片样式详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetImageStyleResponse getImageStyle(GetImageStyleRequest request) throws JdcloudSdkException {
        return new GetImageStyleExecutor().client(this).execute(request);
    }

    /**
     * 提交转码作业
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SubmitTranscodeJobResponse submitTranscodeJob(SubmitTranscodeJobRequest request) throws JdcloudSdkException {
        return new SubmitTranscodeJobExecutor().client(this).execute(request);
    }

    /**
     * 修改图片样式
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateImageStyleResponse updateImageStyle(UpdateImageStyleRequest request) throws JdcloudSdkException {
        return new UpdateImageStyleExecutor().client(this).execute(request);
    }

    /**
     * 查询转码模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetTranscodeTemplateResponse getTranscodeTemplate(GetTranscodeTemplateRequest request) throws JdcloudSdkException {
        return new GetTranscodeTemplateExecutor().client(this).execute(request);
    }

    /**
     * 删除图片样式
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteImageStyleResponse deleteImageStyle(DeleteImageStyleRequest request) throws JdcloudSdkException {
        return new DeleteImageStyleExecutor().client(this).execute(request);
    }

    /**
     * 图片样式总数
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CountImageStyleResponse countImageStyle(CountImageStyleRequest request) throws JdcloudSdkException {
        return new CountImageStyleExecutor().client(this).execute(request);
    }

    /**
     * 创建转码模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateTranscodeTemplateResponse createTranscodeTemplate(CreateTranscodeTemplateRequest request) throws JdcloudSdkException {
        return new CreateTranscodeTemplateExecutor().client(this).execute(request);
    }

    /**
     * 创建截图任务，创建成功时返回任务ID。本接口用于截取指定时间点的画面。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateThumbnailTaskResponse createThumbnailTask(CreateThumbnailTaskRequest request) throws JdcloudSdkException {
        return new CreateThumbnailTaskExecutor().client(this).execute(request);
    }

    /**
     * 查询单个转码作业信息。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetTranscodeJobResponse getTranscodeJob(GetTranscodeJobRequest request) throws JdcloudSdkException {
        return new GetTranscodeJobExecutor().client(this).execute(request);
    }

    /**
     * 查询截图任务，返回满足查询条件的任务列表。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListThumbnailTaskResponse listThumbnailTask(ListThumbnailTaskRequest request) throws JdcloudSdkException {
        return new ListThumbnailTaskExecutor().client(this).execute(request);
    }

    /**
     * 删除bucket的图片样式分隔符配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteStyleDelimiterResponse deleteStyleDelimiter(DeleteStyleDelimiterRequest request) throws JdcloudSdkException {
        return new DeleteStyleDelimiterExecutor().client(this).execute(request);
    }

    /**
     * 获取媒体处理通知
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetNotificationResponse getNotification(GetNotificationRequest request) throws JdcloudSdkException {
        return new GetNotificationExecutor().client(this).execute(request);
    }

    /**
     * 部分修改转码模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyTranscodeTemplateResponse modifyTranscodeTemplate(ModifyTranscodeTemplateRequest request) throws JdcloudSdkException {
        return new ModifyTranscodeTemplateExecutor().client(this).execute(request);
    }

    /**
     * 根据任务ID获取截图任务。
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetThumbnailTaskResponse getThumbnailTask(GetThumbnailTaskRequest request) throws JdcloudSdkException {
        return new GetThumbnailTaskExecutor().client(this).execute(request);
    }

    /**
     * 设置媒体处理通知, 在设置Notification时会对endpoint进行校验, 设置时会对endpoint发一条SubscriptionConfirmation(x-jdcloud-message-type头)的通知, 要求把Message内容进行base64编码返回给系统(body)进行校验
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SetNotificationResponse setNotification(SetNotificationRequest request) throws JdcloudSdkException {
        return new SetNotificationExecutor().client(this).execute(request);
    }

    /**
     * 设置图片样式分隔符
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public SetStyleDelimiterResponse setStyleDelimiter(SetStyleDelimiterRequest request) throws JdcloudSdkException {
        return new SetStyleDelimiterExecutor().client(this).execute(request);
    }

    /**
     * 获取bucket的图片样式分隔符配置
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetStyleDelimiterResponse getStyleDelimiter(GetStyleDelimiterRequest request) throws JdcloudSdkException {
        return new GetStyleDelimiterExecutor().client(this).execute(request);
    }

    /**
     * 查询转码模板列表。
允许通过条件过滤查询，支持的过滤字段如下：
  - transcodeType[eq] 按转码方式精确查询

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListTranscodeTemplatesResponse listTranscodeTemplates(ListTranscodeTemplatesRequest request) throws JdcloudSdkException {
        return new ListTranscodeTemplatesExecutor().client(this).execute(request);
    }

    /**
     * 添加图片样式
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateImageStyleResponse createImageStyle(CreateImageStyleRequest request) throws JdcloudSdkException {
        return new CreateImageStyleExecutor().client(this).execute(request);
    }

    /**
     * 完整更新转码模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateTranscodeTemplateResponse updateTranscodeTemplate(UpdateTranscodeTemplateRequest request) throws JdcloudSdkException {
        return new UpdateTranscodeTemplateExecutor().client(this).execute(request);
    }

    /**
     * 图片样式列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListImageStyleResponse listImageStyle(ListImageStyleRequest request) throws JdcloudSdkException {
        return new ListImageStyleExecutor().client(this).execute(request);
    }

    /**
     * 删除转码模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteTranscodeTemplateResponse deleteTranscodeTemplate(DeleteTranscodeTemplateRequest request) throws JdcloudSdkException {
        return new DeleteTranscodeTemplateExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public MpsClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private MpsClient mpsClient;

        public DefaultBuilder() {
            mpsClient = new MpsClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            mpsClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            mpsClient.httpRequestConfig = config;
            return this;
        }

        public MpsClient build() throws JdcloudSdkException {

            if (mpsClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                mpsClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (mpsClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("MpsClient build error: jdcloud credentials provider not set");
                }
            }
            if (mpsClient.httpRequestConfig == null) {
                mpsClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (mpsClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("MpsClient build error: http request config not set");
                }
            }
            return mpsClient;
        }

        public Builder environment(Environment environment) {
            mpsClient.environment = environment;
            return this;
        }
    }
}
