/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ipanti.model;

import java.util.List;
import java.util.ArrayList;

/**
 * webRule
 */
public class WebRule  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 规则 Id
     */
    private String id;

    /**
     * 实例 Id
     */
    private String instanceId;

    /**
     * 子域名
     */
    private String domain;

    /**
     * 规则的 CNAME
     */
    private String cname;

    /**
     * CNAME 解析状态, 0: 解析异常, 1: 解析正常
     */
    private Integer cnameStatus;

    /**
     * protocol
     */
    private WebRuleProtocol protocol;

    /**
     * 是否为自定义端口号, 0: 为默认, 1: 为自定义
     */
    private Integer customPortStatus;

    /**
     * HTTP 协议的端口号, 如 80,81
     */
    private List<Integer> port;

    /**
     * HTTPS 协议的端口号, 如 443,8443
     */
    private List<Integer> httpsPort;

    /**
     * 是否开启 http 回源, 0: 为不开启, 1: 为开启, 当勾选 HTTPS 时可以配置该属性
     */
    private Integer httpOrigin;

    /**
     * 0: 防御状态, 1: 回源状态
     */
    private Integer status;

    /**
     * 回源类型: A 或者 CNAME
     */
    private String originType;

    /**
     * originAddr
     */
    private List<OriginAddrItem> originAddr;

    /**
     * 回源域名, originType 为 CNAME 时返回该字段
     */
    private String originDomain;

    /**
     * onlineAddr
     */
    private List<String> onlineAddr;

    /**
     * 证书状态, 0: 异常, 1: 正常, 2: 证书未上传
     */
    private Integer httpCertStatus;

    /**
     * 证书 Id
     */
    private String certId;

    /**
     * 证书名称
     */
    private String certName;

    /**
     * 证书内容
     */
    private String httpsCertContent;

    /**
     * 证书私钥
     */
    private String httpsRsaKey;

    /**
     * 是否开启https强制跳转, 当 protocol 为 HTTP_HTTPS 时可以配置该属性
  - 0 不强跳
  - 1 开启强跳

     */
    private Integer forceJump;

    /**
     * 转发规则,  wrr: 带权重的轮询, rr: 不带权重的轮询
     */
    private String algorithm;

    /**
     * CC 状态, 0: CC 关闭, 1: CC 开启
     */
    private Integer ccStatus;

    /**
     * webSocket 状态, 0: 关闭, 1: 开启
     */
    private Integer webSocketStatus;

    /**
     * 黑名单状态, 0: 关闭, 1: 开启
     */
    private Integer blackListEnable;

    /**
     * 白名单状态, 0: 关闭, 1: 开启
     */
    private Integer whiteListEnable;


    /**
     * get 规则 Id
     *
     * @return
     */
    public String getId() {
        return id;
    }

    /**
     * set 规则 Id
     *
     * @param id
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * get 实例 Id
     *
     * @return
     */
    public String getInstanceId() {
        return instanceId;
    }

    /**
     * set 实例 Id
     *
     * @param instanceId
     */
    public void setInstanceId(String instanceId) {
        this.instanceId = instanceId;
    }

    /**
     * get 子域名
     *
     * @return
     */
    public String getDomain() {
        return domain;
    }

    /**
     * set 子域名
     *
     * @param domain
     */
    public void setDomain(String domain) {
        this.domain = domain;
    }

    /**
     * get 规则的 CNAME
     *
     * @return
     */
    public String getCname() {
        return cname;
    }

    /**
     * set 规则的 CNAME
     *
     * @param cname
     */
    public void setCname(String cname) {
        this.cname = cname;
    }

    /**
     * get CNAME 解析状态, 0: 解析异常, 1: 解析正常
     *
     * @return
     */
    public Integer getCnameStatus() {
        return cnameStatus;
    }

    /**
     * set CNAME 解析状态, 0: 解析异常, 1: 解析正常
     *
     * @param cnameStatus
     */
    public void setCnameStatus(Integer cnameStatus) {
        this.cnameStatus = cnameStatus;
    }

    /**
     * get protocol
     *
     * @return
     */
    public WebRuleProtocol getProtocol() {
        return protocol;
    }

    /**
     * set protocol
     *
     * @param protocol
     */
    public void setProtocol(WebRuleProtocol protocol) {
        this.protocol = protocol;
    }

    /**
     * get 是否为自定义端口号, 0: 为默认, 1: 为自定义
     *
     * @return
     */
    public Integer getCustomPortStatus() {
        return customPortStatus;
    }

    /**
     * set 是否为自定义端口号, 0: 为默认, 1: 为自定义
     *
     * @param customPortStatus
     */
    public void setCustomPortStatus(Integer customPortStatus) {
        this.customPortStatus = customPortStatus;
    }

    /**
     * get HTTP 协议的端口号, 如 80,81
     *
     * @return
     */
    public List<Integer> getPort() {
        return port;
    }

    /**
     * set HTTP 协议的端口号, 如 80,81
     *
     * @param port
     */
    public void setPort(List<Integer> port) {
        this.port = port;
    }

    /**
     * get HTTPS 协议的端口号, 如 443,8443
     *
     * @return
     */
    public List<Integer> getHttpsPort() {
        return httpsPort;
    }

    /**
     * set HTTPS 协议的端口号, 如 443,8443
     *
     * @param httpsPort
     */
    public void setHttpsPort(List<Integer> httpsPort) {
        this.httpsPort = httpsPort;
    }

    /**
     * get 是否开启 http 回源, 0: 为不开启, 1: 为开启, 当勾选 HTTPS 时可以配置该属性
     *
     * @return
     */
    public Integer getHttpOrigin() {
        return httpOrigin;
    }

    /**
     * set 是否开启 http 回源, 0: 为不开启, 1: 为开启, 当勾选 HTTPS 时可以配置该属性
     *
     * @param httpOrigin
     */
    public void setHttpOrigin(Integer httpOrigin) {
        this.httpOrigin = httpOrigin;
    }

    /**
     * get 0: 防御状态, 1: 回源状态
     *
     * @return
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * set 0: 防御状态, 1: 回源状态
     *
     * @param status
     */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /**
     * get 回源类型: A 或者 CNAME
     *
     * @return
     */
    public String getOriginType() {
        return originType;
    }

    /**
     * set 回源类型: A 或者 CNAME
     *
     * @param originType
     */
    public void setOriginType(String originType) {
        this.originType = originType;
    }

    /**
     * get originAddr
     *
     * @return
     */
    public List<OriginAddrItem> getOriginAddr() {
        return originAddr;
    }

    /**
     * set originAddr
     *
     * @param originAddr
     */
    public void setOriginAddr(List<OriginAddrItem> originAddr) {
        this.originAddr = originAddr;
    }

    /**
     * get 回源域名, originType 为 CNAME 时返回该字段
     *
     * @return
     */
    public String getOriginDomain() {
        return originDomain;
    }

    /**
     * set 回源域名, originType 为 CNAME 时返回该字段
     *
     * @param originDomain
     */
    public void setOriginDomain(String originDomain) {
        this.originDomain = originDomain;
    }

    /**
     * get onlineAddr
     *
     * @return
     */
    public List<String> getOnlineAddr() {
        return onlineAddr;
    }

    /**
     * set onlineAddr
     *
     * @param onlineAddr
     */
    public void setOnlineAddr(List<String> onlineAddr) {
        this.onlineAddr = onlineAddr;
    }

    /**
     * get 证书状态, 0: 异常, 1: 正常, 2: 证书未上传
     *
     * @return
     */
    public Integer getHttpCertStatus() {
        return httpCertStatus;
    }

    /**
     * set 证书状态, 0: 异常, 1: 正常, 2: 证书未上传
     *
     * @param httpCertStatus
     */
    public void setHttpCertStatus(Integer httpCertStatus) {
        this.httpCertStatus = httpCertStatus;
    }

    /**
     * get 证书 Id
     *
     * @return
     */
    public String getCertId() {
        return certId;
    }

    /**
     * set 证书 Id
     *
     * @param certId
     */
    public void setCertId(String certId) {
        this.certId = certId;
    }

    /**
     * get 证书名称
     *
     * @return
     */
    public String getCertName() {
        return certName;
    }

    /**
     * set 证书名称
     *
     * @param certName
     */
    public void setCertName(String certName) {
        this.certName = certName;
    }

    /**
     * get 证书内容
     *
     * @return
     */
    public String getHttpsCertContent() {
        return httpsCertContent;
    }

    /**
     * set 证书内容
     *
     * @param httpsCertContent
     */
    public void setHttpsCertContent(String httpsCertContent) {
        this.httpsCertContent = httpsCertContent;
    }

    /**
     * get 证书私钥
     *
     * @return
     */
    public String getHttpsRsaKey() {
        return httpsRsaKey;
    }

    /**
     * set 证书私钥
     *
     * @param httpsRsaKey
     */
    public void setHttpsRsaKey(String httpsRsaKey) {
        this.httpsRsaKey = httpsRsaKey;
    }

    /**
     * get 是否开启https强制跳转, 当 protocol 为 HTTP_HTTPS 时可以配置该属性
  - 0 不强跳
  - 1 开启强跳

     *
     * @return
     */
    public Integer getForceJump() {
        return forceJump;
    }

    /**
     * set 是否开启https强制跳转, 当 protocol 为 HTTP_HTTPS 时可以配置该属性
  - 0 不强跳
  - 1 开启强跳

     *
     * @param forceJump
     */
    public void setForceJump(Integer forceJump) {
        this.forceJump = forceJump;
    }

    /**
     * get 转发规则,  wrr: 带权重的轮询, rr: 不带权重的轮询
     *
     * @return
     */
    public String getAlgorithm() {
        return algorithm;
    }

    /**
     * set 转发规则,  wrr: 带权重的轮询, rr: 不带权重的轮询
     *
     * @param algorithm
     */
    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    /**
     * get CC 状态, 0: CC 关闭, 1: CC 开启
     *
     * @return
     */
    public Integer getCcStatus() {
        return ccStatus;
    }

    /**
     * set CC 状态, 0: CC 关闭, 1: CC 开启
     *
     * @param ccStatus
     */
    public void setCcStatus(Integer ccStatus) {
        this.ccStatus = ccStatus;
    }

    /**
     * get webSocket 状态, 0: 关闭, 1: 开启
     *
     * @return
     */
    public Integer getWebSocketStatus() {
        return webSocketStatus;
    }

    /**
     * set webSocket 状态, 0: 关闭, 1: 开启
     *
     * @param webSocketStatus
     */
    public void setWebSocketStatus(Integer webSocketStatus) {
        this.webSocketStatus = webSocketStatus;
    }

    /**
     * get 黑名单状态, 0: 关闭, 1: 开启
     *
     * @return
     */
    public Integer getBlackListEnable() {
        return blackListEnable;
    }

    /**
     * set 黑名单状态, 0: 关闭, 1: 开启
     *
     * @param blackListEnable
     */
    public void setBlackListEnable(Integer blackListEnable) {
        this.blackListEnable = blackListEnable;
    }

    /**
     * get 白名单状态, 0: 关闭, 1: 开启
     *
     * @return
     */
    public Integer getWhiteListEnable() {
        return whiteListEnable;
    }

    /**
     * set 白名单状态, 0: 关闭, 1: 开启
     *
     * @param whiteListEnable
     */
    public void setWhiteListEnable(Integer whiteListEnable) {
        this.whiteListEnable = whiteListEnable;
    }


    /**
     * set 规则 Id
     *
     * @param id
     */
    public WebRule id(String id) {
        this.id = id;
        return this;
    }

    /**
     * set 实例 Id
     *
     * @param instanceId
     */
    public WebRule instanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }

    /**
     * set 子域名
     *
     * @param domain
     */
    public WebRule domain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * set 规则的 CNAME
     *
     * @param cname
     */
    public WebRule cname(String cname) {
        this.cname = cname;
        return this;
    }

    /**
     * set CNAME 解析状态, 0: 解析异常, 1: 解析正常
     *
     * @param cnameStatus
     */
    public WebRule cnameStatus(Integer cnameStatus) {
        this.cnameStatus = cnameStatus;
        return this;
    }

    /**
     * set protocol
     *
     * @param protocol
     */
    public WebRule protocol(WebRuleProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * set 是否为自定义端口号, 0: 为默认, 1: 为自定义
     *
     * @param customPortStatus
     */
    public WebRule customPortStatus(Integer customPortStatus) {
        this.customPortStatus = customPortStatus;
        return this;
    }

    /**
     * set HTTP 协议的端口号, 如 80,81
     *
     * @param port
     */
    public WebRule port(List<Integer> port) {
        this.port = port;
        return this;
    }

    /**
     * set HTTPS 协议的端口号, 如 443,8443
     *
     * @param httpsPort
     */
    public WebRule httpsPort(List<Integer> httpsPort) {
        this.httpsPort = httpsPort;
        return this;
    }

    /**
     * set 是否开启 http 回源, 0: 为不开启, 1: 为开启, 当勾选 HTTPS 时可以配置该属性
     *
     * @param httpOrigin
     */
    public WebRule httpOrigin(Integer httpOrigin) {
        this.httpOrigin = httpOrigin;
        return this;
    }

    /**
     * set 0: 防御状态, 1: 回源状态
     *
     * @param status
     */
    public WebRule status(Integer status) {
        this.status = status;
        return this;
    }

    /**
     * set 回源类型: A 或者 CNAME
     *
     * @param originType
     */
    public WebRule originType(String originType) {
        this.originType = originType;
        return this;
    }

    /**
     * set originAddr
     *
     * @param originAddr
     */
    public WebRule originAddr(List<OriginAddrItem> originAddr) {
        this.originAddr = originAddr;
        return this;
    }

    /**
     * set 回源域名, originType 为 CNAME 时返回该字段
     *
     * @param originDomain
     */
    public WebRule originDomain(String originDomain) {
        this.originDomain = originDomain;
        return this;
    }

    /**
     * set onlineAddr
     *
     * @param onlineAddr
     */
    public WebRule onlineAddr(List<String> onlineAddr) {
        this.onlineAddr = onlineAddr;
        return this;
    }

    /**
     * set 证书状态, 0: 异常, 1: 正常, 2: 证书未上传
     *
     * @param httpCertStatus
     */
    public WebRule httpCertStatus(Integer httpCertStatus) {
        this.httpCertStatus = httpCertStatus;
        return this;
    }

    /**
     * set 证书 Id
     *
     * @param certId
     */
    public WebRule certId(String certId) {
        this.certId = certId;
        return this;
    }

    /**
     * set 证书名称
     *
     * @param certName
     */
    public WebRule certName(String certName) {
        this.certName = certName;
        return this;
    }

    /**
     * set 证书内容
     *
     * @param httpsCertContent
     */
    public WebRule httpsCertContent(String httpsCertContent) {
        this.httpsCertContent = httpsCertContent;
        return this;
    }

    /**
     * set 证书私钥
     *
     * @param httpsRsaKey
     */
    public WebRule httpsRsaKey(String httpsRsaKey) {
        this.httpsRsaKey = httpsRsaKey;
        return this;
    }

    /**
     * set 是否开启https强制跳转, 当 protocol 为 HTTP_HTTPS 时可以配置该属性
  - 0 不强跳
  - 1 开启强跳

     *
     * @param forceJump
     */
    public WebRule forceJump(Integer forceJump) {
        this.forceJump = forceJump;
        return this;
    }

    /**
     * set 转发规则,  wrr: 带权重的轮询, rr: 不带权重的轮询
     *
     * @param algorithm
     */
    public WebRule algorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * set CC 状态, 0: CC 关闭, 1: CC 开启
     *
     * @param ccStatus
     */
    public WebRule ccStatus(Integer ccStatus) {
        this.ccStatus = ccStatus;
        return this;
    }

    /**
     * set webSocket 状态, 0: 关闭, 1: 开启
     *
     * @param webSocketStatus
     */
    public WebRule webSocketStatus(Integer webSocketStatus) {
        this.webSocketStatus = webSocketStatus;
        return this;
    }

    /**
     * set 黑名单状态, 0: 关闭, 1: 开启
     *
     * @param blackListEnable
     */
    public WebRule blackListEnable(Integer blackListEnable) {
        this.blackListEnable = blackListEnable;
        return this;
    }

    /**
     * set 白名单状态, 0: 关闭, 1: 开启
     *
     * @param whiteListEnable
     */
    public WebRule whiteListEnable(Integer whiteListEnable) {
        this.whiteListEnable = whiteListEnable;
        return this;
    }


    /**
     * add item to HTTP 协议的端口号, 如 80,81
     *
     * @param port
     */
    public void addPort(Integer port) {
        if (this.port == null) {
            this.port = new ArrayList<>();
        }
        this.port.add(port);
    }

    /**
     * add item to HTTPS 协议的端口号, 如 443,8443
     *
     * @param httpsPort
     */
    public void addHttpsPort(Integer httpsPort) {
        if (this.httpsPort == null) {
            this.httpsPort = new ArrayList<>();
        }
        this.httpsPort.add(httpsPort);
    }

    /**
     * add item to originAddr
     *
     * @param originAddr
     */
    public void addOriginAddr(OriginAddrItem originAddr) {
        if (this.originAddr == null) {
            this.originAddr = new ArrayList<>();
        }
        this.originAddr.add(originAddr);
    }

    /**
     * add item to onlineAddr
     *
     * @param onlineAddr
     */
    public void addOnlineAddr(String onlineAddr) {
        if (this.onlineAddr == null) {
            this.onlineAddr = new ArrayList<>();
        }
        this.onlineAddr.add(onlineAddr);
    }

}