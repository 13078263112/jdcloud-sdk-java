/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.ipanti.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * webRuleSpec
 */
public class WebRuleSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 子域名
     * Required:true
     */
    @Required
    private String domain;

    /**
     * 协议: http, https 至少一个为 true
     * Required:true
     */
    @Required
    private WebRuleProtocol protocol;

    /**
     * HTTP协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口, 最多添加 5 个
     */
    private List<Integer> port;

    /**
     * HTTPS协议的端口号，如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口, 最多添加 5 个
     */
    private List<Integer> httpsPort;

    /**
     * 回源类型：A或者CNAME
     * Required:true
     */
    @Required
    private String originType;

    /**
     * originType 为 A 时，需要设置该字段
     */
    private List<OriginAddrItem> originAddr;

    /**
     * 备用的回源地址列表，可以配置为一个域名或者多个 ip 地址
     */
    private List<String> onlineAddr;

    /**
     * 回源域名,originType为CNAME时需要指定该字段
     */
    private String originDomain;

    /**
     * 转发规则：wrr-&gt;带权重的轮询，rr-&gt;不带权重的轮询
     * Required:true
     */
    @Required
    private String algorithm;

    /**
     * 是否开启 https 强制跳转，当 protocol 为 HTTP_HTTPS 时可以配置该属性
  - 0 不开启强制跳转
  - 1 开启强制跳转

     */
    private Integer forceJump;

    /**
     * 是否为自定义端口号，0为默认 1为自定义
     */
    private Integer customPortStatus;

    /**
     * 是否开启http回源, 当勾选HTTPS时可以配置该属性
  - 0 不开启
  - 1 开启

     */
    private Integer httpOrigin;

    /**
     * 是否开启 WebSocket, 0 为不开启, 1 为开启
     * Required:true
     */
    @Required
    private Integer webSocketStatus;

    /**
     * 证书内容
     */
    private String httpsCertContent;

    /**
     * 证书私钥
     */
    private String httpsRsaKey;

    /**
     * 证书 Id
  - 如果传 certId, 请确认已经上传了相应的证书
  - certId 缺省时网站规则将使用 httpsCertContent, httpsRsaKey 对应的证书
     */
    private Long certId;


    /**
     * get 子域名
     *
     * @return
     */
    public String getDomain() {
        return domain;
    }

    /**
     * set 子域名
     *
     * @param domain
     */
    public void setDomain(String domain) {
        this.domain = domain;
    }

    /**
     * get 协议: http, https 至少一个为 true
     *
     * @return
     */
    public WebRuleProtocol getProtocol() {
        return protocol;
    }

    /**
     * set 协议: http, https 至少一个为 true
     *
     * @param protocol
     */
    public void setProtocol(WebRuleProtocol protocol) {
        this.protocol = protocol;
    }

    /**
     * get HTTP协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口, 最多添加 5 个
     *
     * @return
     */
    public List<Integer> getPort() {
        return port;
    }

    /**
     * set HTTP协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口, 最多添加 5 个
     *
     * @param port
     */
    public void setPort(List<Integer> port) {
        this.port = port;
    }

    /**
     * get HTTPS协议的端口号，如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口, 最多添加 5 个
     *
     * @return
     */
    public List<Integer> getHttpsPort() {
        return httpsPort;
    }

    /**
     * set HTTPS协议的端口号，如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口, 最多添加 5 个
     *
     * @param httpsPort
     */
    public void setHttpsPort(List<Integer> httpsPort) {
        this.httpsPort = httpsPort;
    }

    /**
     * get 回源类型：A或者CNAME
     *
     * @return
     */
    public String getOriginType() {
        return originType;
    }

    /**
     * set 回源类型：A或者CNAME
     *
     * @param originType
     */
    public void setOriginType(String originType) {
        this.originType = originType;
    }

    /**
     * get originType 为 A 时，需要设置该字段
     *
     * @return
     */
    public List<OriginAddrItem> getOriginAddr() {
        return originAddr;
    }

    /**
     * set originType 为 A 时，需要设置该字段
     *
     * @param originAddr
     */
    public void setOriginAddr(List<OriginAddrItem> originAddr) {
        this.originAddr = originAddr;
    }

    /**
     * get 备用的回源地址列表，可以配置为一个域名或者多个 ip 地址
     *
     * @return
     */
    public List<String> getOnlineAddr() {
        return onlineAddr;
    }

    /**
     * set 备用的回源地址列表，可以配置为一个域名或者多个 ip 地址
     *
     * @param onlineAddr
     */
    public void setOnlineAddr(List<String> onlineAddr) {
        this.onlineAddr = onlineAddr;
    }

    /**
     * get 回源域名,originType为CNAME时需要指定该字段
     *
     * @return
     */
    public String getOriginDomain() {
        return originDomain;
    }

    /**
     * set 回源域名,originType为CNAME时需要指定该字段
     *
     * @param originDomain
     */
    public void setOriginDomain(String originDomain) {
        this.originDomain = originDomain;
    }

    /**
     * get 转发规则：wrr-&gt;带权重的轮询，rr-&gt;不带权重的轮询
     *
     * @return
     */
    public String getAlgorithm() {
        return algorithm;
    }

    /**
     * set 转发规则：wrr-&gt;带权重的轮询，rr-&gt;不带权重的轮询
     *
     * @param algorithm
     */
    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    /**
     * get 是否开启 https 强制跳转，当 protocol 为 HTTP_HTTPS 时可以配置该属性
  - 0 不开启强制跳转
  - 1 开启强制跳转

     *
     * @return
     */
    public Integer getForceJump() {
        return forceJump;
    }

    /**
     * set 是否开启 https 强制跳转，当 protocol 为 HTTP_HTTPS 时可以配置该属性
  - 0 不开启强制跳转
  - 1 开启强制跳转

     *
     * @param forceJump
     */
    public void setForceJump(Integer forceJump) {
        this.forceJump = forceJump;
    }

    /**
     * get 是否为自定义端口号，0为默认 1为自定义
     *
     * @return
     */
    public Integer getCustomPortStatus() {
        return customPortStatus;
    }

    /**
     * set 是否为自定义端口号，0为默认 1为自定义
     *
     * @param customPortStatus
     */
    public void setCustomPortStatus(Integer customPortStatus) {
        this.customPortStatus = customPortStatus;
    }

    /**
     * get 是否开启http回源, 当勾选HTTPS时可以配置该属性
  - 0 不开启
  - 1 开启

     *
     * @return
     */
    public Integer getHttpOrigin() {
        return httpOrigin;
    }

    /**
     * set 是否开启http回源, 当勾选HTTPS时可以配置该属性
  - 0 不开启
  - 1 开启

     *
     * @param httpOrigin
     */
    public void setHttpOrigin(Integer httpOrigin) {
        this.httpOrigin = httpOrigin;
    }

    /**
     * get 是否开启 WebSocket, 0 为不开启, 1 为开启
     *
     * @return
     */
    public Integer getWebSocketStatus() {
        return webSocketStatus;
    }

    /**
     * set 是否开启 WebSocket, 0 为不开启, 1 为开启
     *
     * @param webSocketStatus
     */
    public void setWebSocketStatus(Integer webSocketStatus) {
        this.webSocketStatus = webSocketStatus;
    }

    /**
     * get 证书内容
     *
     * @return
     */
    public String getHttpsCertContent() {
        return httpsCertContent;
    }

    /**
     * set 证书内容
     *
     * @param httpsCertContent
     */
    public void setHttpsCertContent(String httpsCertContent) {
        this.httpsCertContent = httpsCertContent;
    }

    /**
     * get 证书私钥
     *
     * @return
     */
    public String getHttpsRsaKey() {
        return httpsRsaKey;
    }

    /**
     * set 证书私钥
     *
     * @param httpsRsaKey
     */
    public void setHttpsRsaKey(String httpsRsaKey) {
        this.httpsRsaKey = httpsRsaKey;
    }

    /**
     * get 证书 Id
  - 如果传 certId, 请确认已经上传了相应的证书
  - certId 缺省时网站规则将使用 httpsCertContent, httpsRsaKey 对应的证书
     *
     * @return
     */
    public Long getCertId() {
        return certId;
    }

    /**
     * set 证书 Id
  - 如果传 certId, 请确认已经上传了相应的证书
  - certId 缺省时网站规则将使用 httpsCertContent, httpsRsaKey 对应的证书
     *
     * @param certId
     */
    public void setCertId(Long certId) {
        this.certId = certId;
    }


    /**
     * set 子域名
     *
     * @param domain
     */
    public WebRuleSpec domain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * set 协议: http, https 至少一个为 true
     *
     * @param protocol
     */
    public WebRuleSpec protocol(WebRuleProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * set HTTP协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口, 最多添加 5 个
     *
     * @param port
     */
    public WebRuleSpec port(List<Integer> port) {
        this.port = port;
        return this;
    }

    /**
     * set HTTPS协议的端口号，如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口, 最多添加 5 个
     *
     * @param httpsPort
     */
    public WebRuleSpec httpsPort(List<Integer> httpsPort) {
        this.httpsPort = httpsPort;
        return this;
    }

    /**
     * set 回源类型：A或者CNAME
     *
     * @param originType
     */
    public WebRuleSpec originType(String originType) {
        this.originType = originType;
        return this;
    }

    /**
     * set originType 为 A 时，需要设置该字段
     *
     * @param originAddr
     */
    public WebRuleSpec originAddr(List<OriginAddrItem> originAddr) {
        this.originAddr = originAddr;
        return this;
    }

    /**
     * set 备用的回源地址列表，可以配置为一个域名或者多个 ip 地址
     *
     * @param onlineAddr
     */
    public WebRuleSpec onlineAddr(List<String> onlineAddr) {
        this.onlineAddr = onlineAddr;
        return this;
    }

    /**
     * set 回源域名,originType为CNAME时需要指定该字段
     *
     * @param originDomain
     */
    public WebRuleSpec originDomain(String originDomain) {
        this.originDomain = originDomain;
        return this;
    }

    /**
     * set 转发规则：wrr-&gt;带权重的轮询，rr-&gt;不带权重的轮询
     *
     * @param algorithm
     */
    public WebRuleSpec algorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * set 是否开启 https 强制跳转，当 protocol 为 HTTP_HTTPS 时可以配置该属性
  - 0 不开启强制跳转
  - 1 开启强制跳转

     *
     * @param forceJump
     */
    public WebRuleSpec forceJump(Integer forceJump) {
        this.forceJump = forceJump;
        return this;
    }

    /**
     * set 是否为自定义端口号，0为默认 1为自定义
     *
     * @param customPortStatus
     */
    public WebRuleSpec customPortStatus(Integer customPortStatus) {
        this.customPortStatus = customPortStatus;
        return this;
    }

    /**
     * set 是否开启http回源, 当勾选HTTPS时可以配置该属性
  - 0 不开启
  - 1 开启

     *
     * @param httpOrigin
     */
    public WebRuleSpec httpOrigin(Integer httpOrigin) {
        this.httpOrigin = httpOrigin;
        return this;
    }

    /**
     * set 是否开启 WebSocket, 0 为不开启, 1 为开启
     *
     * @param webSocketStatus
     */
    public WebRuleSpec webSocketStatus(Integer webSocketStatus) {
        this.webSocketStatus = webSocketStatus;
        return this;
    }

    /**
     * set 证书内容
     *
     * @param httpsCertContent
     */
    public WebRuleSpec httpsCertContent(String httpsCertContent) {
        this.httpsCertContent = httpsCertContent;
        return this;
    }

    /**
     * set 证书私钥
     *
     * @param httpsRsaKey
     */
    public WebRuleSpec httpsRsaKey(String httpsRsaKey) {
        this.httpsRsaKey = httpsRsaKey;
        return this;
    }

    /**
     * set 证书 Id
  - 如果传 certId, 请确认已经上传了相应的证书
  - certId 缺省时网站规则将使用 httpsCertContent, httpsRsaKey 对应的证书
     *
     * @param certId
     */
    public WebRuleSpec certId(Long certId) {
        this.certId = certId;
        return this;
    }


    /**
     * add item to HTTP协议的端口号, 如80, 81; 如果 protocol.http 为 true, 至少配置一个端口, 最多添加 5 个
     *
     * @param port
     */
    public void addPort(Integer port) {
        if (this.port == null) {
            this.port = new ArrayList<>();
        }
        this.port.add(port);
    }

    /**
     * add item to HTTPS协议的端口号，如443, 8443; 如果 protocol.https 为 true, 至少配置一个端口, 最多添加 5 个
     *
     * @param httpsPort
     */
    public void addHttpsPort(Integer httpsPort) {
        if (this.httpsPort == null) {
            this.httpsPort = new ArrayList<>();
        }
        this.httpsPort.add(httpsPort);
    }

    /**
     * add item to originType 为 A 时，需要设置该字段
     *
     * @param originAddr
     */
    public void addOriginAddr(OriginAddrItem originAddr) {
        if (this.originAddr == null) {
            this.originAddr = new ArrayList<>();
        }
        this.originAddr.add(originAddr);
    }

    /**
     * add item to 备用的回源地址列表，可以配置为一个域名或者多个 ip 地址
     *
     * @param onlineAddr
     */
    public void addOnlineAddr(String onlineAddr) {
        if (this.onlineAddr == null) {
            this.onlineAddr = new ArrayList<>();
        }
        this.onlineAddr.add(onlineAddr);
    }

}