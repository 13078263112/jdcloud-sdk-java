/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 云鼎2.0 openApi
 * 云鼎2.0 openApi 相关接口
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.yunding.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.yunding.model.DeleteRdsDatabaseRequest;
import com.jdcloud.sdk.service.yunding.model.DeleteRdsDatabaseResponse;
import com.jdcloud.sdk.service.yunding.client.DeleteRdsDatabaseExecutor;
import com.jdcloud.sdk.service.yunding.model.DeleteVmInstanceRequest;
import com.jdcloud.sdk.service.yunding.model.DeleteVmInstanceResponse;
import com.jdcloud.sdk.service.yunding.client.DeleteVmInstanceExecutor;
import com.jdcloud.sdk.service.yunding.model.UnassignSecondaryIpsRequest;
import com.jdcloud.sdk.service.yunding.model.UnassignSecondaryIpsResponse;
import com.jdcloud.sdk.service.yunding.client.UnassignSecondaryIpsExecutor;
import com.jdcloud.sdk.service.yunding.model.AssignSecondaryIpsRequest;
import com.jdcloud.sdk.service.yunding.model.AssignSecondaryIpsResponse;
import com.jdcloud.sdk.service.yunding.client.AssignSecondaryIpsExecutor;

/**
 * yundingClient
 */
public class YundingClient extends JdcloudClient {

    public final static String ApiVersion = "v2";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.0";
    public final static String DefaultEndpoint = "yunding.jdcloud-api.com";
    public final static String ServiceName = "yunding";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private YundingClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 从RDS实例中删除数据库。为便于管理和数据恢复，RDS对用户权限进行了控制，用户仅能通过控制台或本接口删除数据库 [MFA enabled]
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteRdsDatabaseResponse deleteRdsDatabase(DeleteRdsDatabaseRequest request) throws JdcloudSdkException {
        return new DeleteRdsDatabaseExecutor().client(this).execute(request);
    }

    /**
     * 删除按配置计费、或包年包月已到期的单个云主机。不能删除没有计费信息的云主机。&lt;br&gt;
云主机状态必须为运行&lt;b&gt;running&lt;/b&gt;、停止&lt;b&gt;stopped&lt;/b&gt;、错误&lt;b&gt;error&lt;/b&gt;，同时云主机没有正在进行中的任务才可删除。&lt;br&gt;
如果主机中挂载的数据盘为按配置计费的云硬盘且AutoDelete属性为true，那么数据盘会随主机一起删除。
 [MFA enabled]
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteVmInstanceResponse deleteVmInstance(DeleteVmInstanceRequest request) throws JdcloudSdkException {
        return new DeleteVmInstanceExecutor().client(this).execute(request);
    }

    /**
     * 给网卡删除secondaryIp接口
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UnassignSecondaryIpsResponse unassignSecondaryIps(UnassignSecondaryIpsRequest request) throws JdcloudSdkException {
        return new UnassignSecondaryIpsExecutor().client(this).execute(request);
    }

    /**
     * 给网卡分配secondaryIp接口
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AssignSecondaryIpsResponse assignSecondaryIps(AssignSecondaryIpsRequest request) throws JdcloudSdkException {
        return new AssignSecondaryIpsExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public YundingClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private YundingClient yundingClient;

        public DefaultBuilder() {
            yundingClient = new YundingClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            yundingClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            yundingClient.httpRequestConfig = config;
            return this;
        }

        public YundingClient build() throws JdcloudSdkException {

            if (yundingClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                yundingClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (yundingClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("YundingClient build error: jdcloud credentials provider not set");
                }
            }
            if (yundingClient.httpRequestConfig == null) {
                yundingClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (yundingClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("YundingClient build error: http request config not set");
                }
            }
            return yundingClient;
        }

        public Builder environment(Environment environment) {
            yundingClient.environment = environment;
            return this;
        }
    }
}
