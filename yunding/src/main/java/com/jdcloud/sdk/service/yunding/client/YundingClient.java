/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 云鼎2.0 openApi
 * 云鼎2.0 openApi 相关接口
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.yunding.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.yunding.model.DeleteRdsDatabaseRequest;
import com.jdcloud.sdk.service.yunding.model.DeleteRdsDatabaseResponse;
import com.jdcloud.sdk.service.yunding.client.DeleteRdsDatabaseExecutor;
import com.jdcloud.sdk.service.yunding.model.DeleteVmInstanceRequest;
import com.jdcloud.sdk.service.yunding.model.DeleteVmInstanceResponse;
import com.jdcloud.sdk.service.yunding.client.DeleteVmInstanceExecutor;
import com.jdcloud.sdk.service.yunding.model.CreateVmInstancesRequest;
import com.jdcloud.sdk.service.yunding.model.CreateVmInstancesResponse;
import com.jdcloud.sdk.service.yunding.client.CreateVmInstancesExecutor;
import com.jdcloud.sdk.service.yunding.model.DescribeVpcRequest;
import com.jdcloud.sdk.service.yunding.model.DescribeVpcResponse;
import com.jdcloud.sdk.service.yunding.client.DescribeVpcExecutor;
import com.jdcloud.sdk.service.yunding.model.AttachNetworkInterfaceRequest;
import com.jdcloud.sdk.service.yunding.model.AttachNetworkInterfaceResponse;
import com.jdcloud.sdk.service.yunding.client.AttachNetworkInterfaceExecutor;
import com.jdcloud.sdk.service.yunding.model.DeleteElasticIpRequest;
import com.jdcloud.sdk.service.yunding.model.DeleteElasticIpResponse;
import com.jdcloud.sdk.service.yunding.client.DeleteElasticIpExecutor;
import com.jdcloud.sdk.service.yunding.model.DetachNetworkInterfaceRequest;
import com.jdcloud.sdk.service.yunding.model.DetachNetworkInterfaceResponse;
import com.jdcloud.sdk.service.yunding.client.DetachNetworkInterfaceExecutor;

/**
 * yundingClient
 */
public class YundingClient extends JdcloudClient {

    public final static String ApiVersion = "v2";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.0";
    public final static String DefaultEndpoint = "yunding.jdcloud-api.com";
    public final static String ServiceName = "yunding";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private YundingClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 从RDS实例中删除数据库。为便于管理和数据恢复，RDS对用户权限进行了控制，用户仅能通过控制台或本接口删除数据库 [MFA enabled]
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteRdsDatabaseResponse deleteRdsDatabase(DeleteRdsDatabaseRequest request) throws JdcloudSdkException {
        return new DeleteRdsDatabaseExecutor().client(this).execute(request);
    }

    /**
     * 删除按配置计费、或包年包月已到期的单个云主机。不能删除没有计费信息的云主机。&lt;br&gt;
云主机状态必须为运行&lt;b&gt;running&lt;/b&gt;、停止&lt;b&gt;stopped&lt;/b&gt;、错误&lt;b&gt;error&lt;/b&gt;，同时云主机没有正在进行中的任务才可删除。&lt;br&gt;
如果主机中挂载的数据盘为按配置计费的云硬盘且AutoDelete属性为true，那么数据盘会随主机一起删除。
 [MFA enabled]
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteVmInstanceResponse deleteVmInstance(DeleteVmInstanceRequest request) throws JdcloudSdkException {
        return new DeleteVmInstanceExecutor().client(this).execute(request);
    }

    /**
     * 创建一台或多台指定配置的云主机，创建模式分为三种：1.普通方式、2.使用高可用组、3.使用启动模板。三种方式创建云主机时参数的必传与非必传是不同的，具体请参考&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/create_vm_sample&quot;&gt;参数详细说明&lt;/a&gt;&lt;br&gt;
- 创建云主机需要通过实名认证
- 实例规格
    - 可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定地域或可用区的规格信息。
    - 不能使用已下线、或已售馨的规格ID
- 镜像
    - Windows Server所有镜像CPU不可选超过64核CPU。
    - 可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimages&quot;&gt;DescribeImages&lt;/a&gt;接口获得指定地域的镜像信息。
    - 选择的镜像必须支持选择的实例规格。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeimageconstraints&quot;&gt;DescribeImageConstraints&lt;/a&gt;接口获得指定镜像的实例规格限制信息。&lt;br&gt;
- 网络配置
    - 指定主网卡配置信息
        - 必须指定subnetId
        - 可以指定elasticIp规格来约束创建的弹性IP，带宽取值范围[1-200]Mbps，步进1Mbps
        - 可以指定主网卡的内网主IP(primaryIpAddress)，此时maxCount只能为1
        - 安全组securityGroup需与子网Subnet在同一个私有网络VPC内
        - 一台云主机创建时必须至少指定一个安全组，至多指定5个安全组，如果没有指定安全组，默认使用默认安全组
        - 主网卡deviceIndex设置为1
- 存储
    - 系统盘
        - 磁盘分类，系统盘支持local或cloud
        - 磁盘大小
            - local：不能指定大小，默认为40GB
            - cloud：取值范围: 40-500GB，并且不能小于镜像的最小系统盘大小，如果没有指定，默认以镜像中的系统盘大小为准
        - 自动删除
            - 如果是local类型，默认自动删除，不可修改
            - 如果是cloud类型的按配置计费的云硬盘，默认为True，可修改
            - 如果是cloud类型的包年包月的云硬盘，默认为False，不可修改
    - 数据盘
        - 磁盘分类，数据盘仅支持cloud
        - 云硬盘类型可以选择ssd、premium-hdd、hdd.std1、ssd.gp1、ssd.io1
        - 磁盘大小
            - premium-hdd：范围[20,3000]GB，步长为10G
            - ssd：范围[20,1000]GB，步长为10G
            - hdd.std1、ssd.gp1、ssd.io1: 范围[20-16000]GB，步长为10GB
        - 自动删除
            - 默认自动删除，如果是包年包月的云硬盘，此参数不生效
        - 可以从快照创建磁盘
    - local类型系统的云主机可以挂载8块云硬盘
    - cloud类型系统的云主机可以挂载7块云硬盘
- 计费
    - 弹性IP的计费模式，如果选择按用量类型可以单独设置，其它计费模式都以主机为准
    - 云硬盘的计费模式以主机为准
- 其他
    - 创建完成后，主机状态为running
    - 仅Linux系统云主机可以指定密钥
    - maxCount为最大努力，不保证一定能达到maxCount
    - 虚机的az会覆盖磁盘的az属性
- 密码
    - &lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/general_parameters&quot;&gt;参考公共参数规范&lt;/a&gt;

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateVmInstancesResponse createVmInstances(CreateVmInstancesRequest request) throws JdcloudSdkException {
        return new CreateVmInstancesExecutor().client(this).execute(request);
    }

    /**
     * 查询Vpc信息详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeVpcResponse describeVpc(DescribeVpcRequest request) throws JdcloudSdkException {
        return new DescribeVpcExecutor().client(this).execute(request);
    }

    /**
     * 云主机绑定一块弹性网卡。&lt;br&gt;
云主机状态必须为&lt;b&gt;running&lt;/b&gt;或&lt;b&gt;stopped&lt;/b&gt;状态，并且没有正在进行中的任务才可操作。&lt;br&gt;
弹性网卡上如果绑定了弹性公网IP，那么其所在az需要与云主机的az保持一致，或者为全可用区型弹性公网IP，才可挂载该网卡。&lt;br&gt;
云主机挂载弹性网卡的数量，不能超过实例规格的限制。可查询&lt;a href&#x3D;&quot;http://docs.jdcloud.com/virtual-machines/api/describeinstancetypes&quot;&gt;DescribeInstanceTypes&lt;/a&gt;接口获得指定规格可挂载弹性网卡的数量上限。&lt;br&gt;
弹性网卡与云主机必须在相同vpc下。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AttachNetworkInterfaceResponse attachNetworkInterface(AttachNetworkInterfaceRequest request) throws JdcloudSdkException {
        return new AttachNetworkInterfaceExecutor().client(this).execute(request);
    }

    /**
     * 删除弹性Ip
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteElasticIpResponse deleteElasticIp(DeleteElasticIpRequest request) throws JdcloudSdkException {
        return new DeleteElasticIpExecutor().client(this).execute(request);
    }

    /**
     * 云主机缷载一块弹性网卡。&lt;br&gt;
云主机状态必须为&lt;b&gt;running&lt;/b&gt;或&lt;b&gt;stopped&lt;/b&gt;状态，并且没有正在进行中的任务才可操作。&lt;br&gt;
不能缷载主网卡。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DetachNetworkInterfaceResponse detachNetworkInterface(DetachNetworkInterfaceRequest request) throws JdcloudSdkException {
        return new DetachNetworkInterfaceExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public YundingClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private YundingClient yundingClient;

        public DefaultBuilder() {
            yundingClient = new YundingClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            yundingClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            yundingClient.httpRequestConfig = config;
            return this;
        }

        public YundingClient build() throws JdcloudSdkException {

            if (yundingClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                yundingClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (yundingClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("YundingClient build error: jdcloud credentials provider not set");
                }
            }
            if (yundingClient.httpRequestConfig == null) {
                yundingClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (yundingClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("YundingClient build error: http request config not set");
                }
            }
            return yundingClient;
        }

        public Builder environment(Environment environment) {
            yundingClient.environment = environment;
            return this;
        }
    }
}
