/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD CDN Operation And Query API
 * API related to CDN instances
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.cdn.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsDataGroupByAreaRequest;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsDataGroupByAreaResponse;
import com.jdcloud.sdk.service.cdn.client.QueryStatisticsDataGroupByAreaExecutor;
import com.jdcloud.sdk.service.cdn.model.StopDomainRequest;
import com.jdcloud.sdk.service.cdn.model.StopDomainResponse;
import com.jdcloud.sdk.service.cdn.client.StopDomainExecutor;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsTopIpRequest;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsTopIpResponse;
import com.jdcloud.sdk.service.cdn.client.QueryStatisticsTopIpExecutor;
import com.jdcloud.sdk.service.cdn.model.DeleteDomainRequest;
import com.jdcloud.sdk.service.cdn.model.DeleteDomainResponse;
import com.jdcloud.sdk.service.cdn.client.DeleteDomainExecutor;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsDataRequest;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsDataResponse;
import com.jdcloud.sdk.service.cdn.client.QueryStatisticsDataExecutor;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsTopUrlRequest;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsTopUrlResponse;
import com.jdcloud.sdk.service.cdn.client.QueryStatisticsTopUrlExecutor;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsDataGroupSumRequest;
import com.jdcloud.sdk.service.cdn.model.QueryStatisticsDataGroupSumResponse;
import com.jdcloud.sdk.service.cdn.client.QueryStatisticsDataGroupSumExecutor;
import com.jdcloud.sdk.service.cdn.model.GetDomainListRequest;
import com.jdcloud.sdk.service.cdn.model.GetDomainListResponse;
import com.jdcloud.sdk.service.cdn.client.GetDomainListExecutor;
import com.jdcloud.sdk.service.cdn.model.GetDomainDetailRequest;
import com.jdcloud.sdk.service.cdn.model.GetDomainDetailResponse;
import com.jdcloud.sdk.service.cdn.client.GetDomainDetailExecutor;
import com.jdcloud.sdk.service.cdn.model.StartDomainRequest;
import com.jdcloud.sdk.service.cdn.model.StartDomainResponse;
import com.jdcloud.sdk.service.cdn.client.StartDomainExecutor;

/**
 * cdnClient
 */
public class CdnClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.8";
    public final static String DefaultEndpoint = "cdn.jdcloud-api.com";
    public final static String ServiceName = "cdn";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private CdnClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 分地区及运营商查询统计数据
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryStatisticsDataGroupByAreaResponse queryStatisticsDataGroupByArea(QueryStatisticsDataGroupByAreaRequest request) throws JdcloudSdkException {
        return new QueryStatisticsDataGroupByAreaExecutor().client(this).execute(request);
    }

    /**
     * 停止加速域名
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopDomainResponse stopDomain(StopDomainRequest request) throws JdcloudSdkException {
        return new StopDomainExecutor().client(this).execute(request);
    }

    /**
     * 查询TOP IP
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryStatisticsTopIpResponse queryStatisticsTopIp(QueryStatisticsTopIpRequest request) throws JdcloudSdkException {
        return new QueryStatisticsTopIpExecutor().client(this).execute(request);
    }

    /**
     * 删除加速域名
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteDomainResponse deleteDomain(DeleteDomainRequest request) throws JdcloudSdkException {
        return new DeleteDomainExecutor().client(this).execute(request);
    }

    /**
     * 查询统计数据
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryStatisticsDataResponse queryStatisticsData(QueryStatisticsDataRequest request) throws JdcloudSdkException {
        return new QueryStatisticsDataExecutor().client(this).execute(request);
    }

    /**
     * 查询TOP Url
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryStatisticsTopUrlResponse queryStatisticsTopUrl(QueryStatisticsTopUrlRequest request) throws JdcloudSdkException {
        return new QueryStatisticsTopUrlExecutor().client(this).execute(request);
    }

    /**
     * 查询统计数据并进行汇总加和
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryStatisticsDataGroupSumResponse queryStatisticsDataGroupSum(QueryStatisticsDataGroupSumRequest request) throws JdcloudSdkException {
        return new QueryStatisticsDataGroupSumExecutor().client(this).execute(request);
    }

    /**
     * 查询加速域名接口
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetDomainListResponse getDomainList(GetDomainListRequest request) throws JdcloudSdkException {
        return new GetDomainListExecutor().client(this).execute(request);
    }

    /**
     * 查询加速域名详情
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetDomainDetailResponse getDomainDetail(GetDomainDetailRequest request) throws JdcloudSdkException {
        return new GetDomainDetailExecutor().client(this).execute(request);
    }

    /**
     * 启动加速域名
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartDomainResponse startDomain(StartDomainRequest request) throws JdcloudSdkException {
        return new StartDomainExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public CdnClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private CdnClient cdnClient;

        public DefaultBuilder() {
            cdnClient = new CdnClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            cdnClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            cdnClient.httpRequestConfig = config;
            return this;
        }

        public CdnClient build() throws JdcloudSdkException {

            if (cdnClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                cdnClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (cdnClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("CdnClient build error: jdcloud credentials provider not set");
                }
            }
            if (cdnClient.httpRequestConfig == null) {
                cdnClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (cdnClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("CdnClient build error: http request config not set");
                }
            }
            return cdnClient;
        }

        public Builder environment(Environment environment) {
            cdnClient.environment = environment;
            return this;
        }
    }
}
