/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.function.model;


/**
 * statistics
 */
public class Statistics  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 用户目前已经创建的函数数量
     */
    private Integer currentFunctionNumber;

    /**
     * 用户可创建函数的最大数量
     */
    private Integer maxFunctionNumber;

    /**
     * 用户当前使用的代码存储空间
     */
    private Float currentCodeSize;

    /**
     * 用户可使用的最大代码存储空间
     */
    private Integer maxCodeSize;


    /**
     * get 用户目前已经创建的函数数量
     *
     * @return
     */
    public Integer getCurrentFunctionNumber() {
        return currentFunctionNumber;
    }

    /**
     * set 用户目前已经创建的函数数量
     *
     * @param currentFunctionNumber
     */
    public void setCurrentFunctionNumber(Integer currentFunctionNumber) {
        this.currentFunctionNumber = currentFunctionNumber;
    }

    /**
     * get 用户可创建函数的最大数量
     *
     * @return
     */
    public Integer getMaxFunctionNumber() {
        return maxFunctionNumber;
    }

    /**
     * set 用户可创建函数的最大数量
     *
     * @param maxFunctionNumber
     */
    public void setMaxFunctionNumber(Integer maxFunctionNumber) {
        this.maxFunctionNumber = maxFunctionNumber;
    }

    /**
     * get 用户当前使用的代码存储空间
     *
     * @return
     */
    public Float getCurrentCodeSize() {
        return currentCodeSize;
    }

    /**
     * set 用户当前使用的代码存储空间
     *
     * @param currentCodeSize
     */
    public void setCurrentCodeSize(Float currentCodeSize) {
        this.currentCodeSize = currentCodeSize;
    }

    /**
     * get 用户可使用的最大代码存储空间
     *
     * @return
     */
    public Integer getMaxCodeSize() {
        return maxCodeSize;
    }

    /**
     * set 用户可使用的最大代码存储空间
     *
     * @param maxCodeSize
     */
    public void setMaxCodeSize(Integer maxCodeSize) {
        this.maxCodeSize = maxCodeSize;
    }


    /**
     * set 用户目前已经创建的函数数量
     *
     * @param currentFunctionNumber
     */
    public Statistics currentFunctionNumber(Integer currentFunctionNumber) {
        this.currentFunctionNumber = currentFunctionNumber;
        return this;
    }

    /**
     * set 用户可创建函数的最大数量
     *
     * @param maxFunctionNumber
     */
    public Statistics maxFunctionNumber(Integer maxFunctionNumber) {
        this.maxFunctionNumber = maxFunctionNumber;
        return this;
    }

    /**
     * set 用户当前使用的代码存储空间
     *
     * @param currentCodeSize
     */
    public Statistics currentCodeSize(Float currentCodeSize) {
        this.currentCodeSize = currentCodeSize;
        return this;
    }

    /**
     * set 用户可使用的最大代码存储空间
     *
     * @param maxCodeSize
     */
    public Statistics maxCodeSize(Integer maxCodeSize) {
        this.maxCodeSize = maxCodeSize;
        return this;
    }


}