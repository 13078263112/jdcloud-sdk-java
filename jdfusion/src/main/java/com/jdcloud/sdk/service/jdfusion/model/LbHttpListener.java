/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.jdfusion.model;


/**
 * 负载均衡监听器
 */
public class LbHttpListener  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 负载均衡实例前端使用的端口。
     */
    private Integer listenerPort;

    /**
     * 负载均衡实例后端使用的端口。
     */
    private Integer backendServerPort;

    /**
     * 当前监听的状态。
     */
    private String status;

    /**
     * 调度算法。
     */
    private String scheduler;

    /**
     * 绑定的服务器组ID。
     */
    private String vServerGroupId;

    /**
     * 是否开启健康检查。
     */
    private String healthCheck;

    /**
     * 否  健康检查使用的端口
     */
    private Integer healthCheckConnectPort;

    /**
     * 否  健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。取值：2-10
     */
    private Integer healthyThreshold;

    /**
     * 否  健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。取值：2-10
     */
    private Integer unhealthyThreshold;

    /**
     * 否  接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。取值：1-300（秒）
     */
    private Integer healthCheckTimeout;

    /**
     * 否  健康检查的时间间隔。取值：1-50（秒）
     */
    private Integer healthCheckInterval;

    /**
     * 否  健康检查正常的HTTP状态码，多个状态码用逗号分隔。取值：http_2xx（默认值） | http_3xx | http_4xx | http_5xx
     */
    private String healthCheckHttpCode;


    /**
     * get 负载均衡实例前端使用的端口。
     *
     * @return
     */
    public Integer getListenerPort() {
        return listenerPort;
    }

    /**
     * set 负载均衡实例前端使用的端口。
     *
     * @param listenerPort
     */
    public void setListenerPort(Integer listenerPort) {
        this.listenerPort = listenerPort;
    }

    /**
     * get 负载均衡实例后端使用的端口。
     *
     * @return
     */
    public Integer getBackendServerPort() {
        return backendServerPort;
    }

    /**
     * set 负载均衡实例后端使用的端口。
     *
     * @param backendServerPort
     */
    public void setBackendServerPort(Integer backendServerPort) {
        this.backendServerPort = backendServerPort;
    }

    /**
     * get 当前监听的状态。
     *
     * @return
     */
    public String getStatus() {
        return status;
    }

    /**
     * set 当前监听的状态。
     *
     * @param status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * get 调度算法。
     *
     * @return
     */
    public String getScheduler() {
        return scheduler;
    }

    /**
     * set 调度算法。
     *
     * @param scheduler
     */
    public void setScheduler(String scheduler) {
        this.scheduler = scheduler;
    }

    /**
     * get 绑定的服务器组ID。
     *
     * @return
     */
    public String getVServerGroupId() {
        return vServerGroupId;
    }

    /**
     * set 绑定的服务器组ID。
     *
     * @param vServerGroupId
     */
    public void setVServerGroupId(String vServerGroupId) {
        this.vServerGroupId = vServerGroupId;
    }

    /**
     * get 是否开启健康检查。
     *
     * @return
     */
    public String getHealthCheck() {
        return healthCheck;
    }

    /**
     * set 是否开启健康检查。
     *
     * @param healthCheck
     */
    public void setHealthCheck(String healthCheck) {
        this.healthCheck = healthCheck;
    }

    /**
     * get 否  健康检查使用的端口
     *
     * @return
     */
    public Integer getHealthCheckConnectPort() {
        return healthCheckConnectPort;
    }

    /**
     * set 否  健康检查使用的端口
     *
     * @param healthCheckConnectPort
     */
    public void setHealthCheckConnectPort(Integer healthCheckConnectPort) {
        this.healthCheckConnectPort = healthCheckConnectPort;
    }

    /**
     * get 否  健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。取值：2-10
     *
     * @return
     */
    public Integer getHealthyThreshold() {
        return healthyThreshold;
    }

    /**
     * set 否  健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。取值：2-10
     *
     * @param healthyThreshold
     */
    public void setHealthyThreshold(Integer healthyThreshold) {
        this.healthyThreshold = healthyThreshold;
    }

    /**
     * get 否  健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。取值：2-10
     *
     * @return
     */
    public Integer getUnhealthyThreshold() {
        return unhealthyThreshold;
    }

    /**
     * set 否  健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。取值：2-10
     *
     * @param unhealthyThreshold
     */
    public void setUnhealthyThreshold(Integer unhealthyThreshold) {
        this.unhealthyThreshold = unhealthyThreshold;
    }

    /**
     * get 否  接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。取值：1-300（秒）
     *
     * @return
     */
    public Integer getHealthCheckTimeout() {
        return healthCheckTimeout;
    }

    /**
     * set 否  接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。取值：1-300（秒）
     *
     * @param healthCheckTimeout
     */
    public void setHealthCheckTimeout(Integer healthCheckTimeout) {
        this.healthCheckTimeout = healthCheckTimeout;
    }

    /**
     * get 否  健康检查的时间间隔。取值：1-50（秒）
     *
     * @return
     */
    public Integer getHealthCheckInterval() {
        return healthCheckInterval;
    }

    /**
     * set 否  健康检查的时间间隔。取值：1-50（秒）
     *
     * @param healthCheckInterval
     */
    public void setHealthCheckInterval(Integer healthCheckInterval) {
        this.healthCheckInterval = healthCheckInterval;
    }

    /**
     * get 否  健康检查正常的HTTP状态码，多个状态码用逗号分隔。取值：http_2xx（默认值） | http_3xx | http_4xx | http_5xx
     *
     * @return
     */
    public String getHealthCheckHttpCode() {
        return healthCheckHttpCode;
    }

    /**
     * set 否  健康检查正常的HTTP状态码，多个状态码用逗号分隔。取值：http_2xx（默认值） | http_3xx | http_4xx | http_5xx
     *
     * @param healthCheckHttpCode
     */
    public void setHealthCheckHttpCode(String healthCheckHttpCode) {
        this.healthCheckHttpCode = healthCheckHttpCode;
    }


    /**
     * set 负载均衡实例前端使用的端口。
     *
     * @param listenerPort
     */
    public LbHttpListener listenerPort(Integer listenerPort) {
        this.listenerPort = listenerPort;
        return this;
    }

    /**
     * set 负载均衡实例后端使用的端口。
     *
     * @param backendServerPort
     */
    public LbHttpListener backendServerPort(Integer backendServerPort) {
        this.backendServerPort = backendServerPort;
        return this;
    }

    /**
     * set 当前监听的状态。
     *
     * @param status
     */
    public LbHttpListener status(String status) {
        this.status = status;
        return this;
    }

    /**
     * set 调度算法。
     *
     * @param scheduler
     */
    public LbHttpListener scheduler(String scheduler) {
        this.scheduler = scheduler;
        return this;
    }

    /**
     * set 绑定的服务器组ID。
     *
     * @param vServerGroupId
     */
    public LbHttpListener vServerGroupId(String vServerGroupId) {
        this.vServerGroupId = vServerGroupId;
        return this;
    }

    /**
     * set 是否开启健康检查。
     *
     * @param healthCheck
     */
    public LbHttpListener healthCheck(String healthCheck) {
        this.healthCheck = healthCheck;
        return this;
    }

    /**
     * set 否  健康检查使用的端口
     *
     * @param healthCheckConnectPort
     */
    public LbHttpListener healthCheckConnectPort(Integer healthCheckConnectPort) {
        this.healthCheckConnectPort = healthCheckConnectPort;
        return this;
    }

    /**
     * set 否  健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。取值：2-10
     *
     * @param healthyThreshold
     */
    public LbHttpListener healthyThreshold(Integer healthyThreshold) {
        this.healthyThreshold = healthyThreshold;
        return this;
    }

    /**
     * set 否  健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。取值：2-10
     *
     * @param unhealthyThreshold
     */
    public LbHttpListener unhealthyThreshold(Integer unhealthyThreshold) {
        this.unhealthyThreshold = unhealthyThreshold;
        return this;
    }

    /**
     * set 否  接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。取值：1-300（秒）
     *
     * @param healthCheckTimeout
     */
    public LbHttpListener healthCheckTimeout(Integer healthCheckTimeout) {
        this.healthCheckTimeout = healthCheckTimeout;
        return this;
    }

    /**
     * set 否  健康检查的时间间隔。取值：1-50（秒）
     *
     * @param healthCheckInterval
     */
    public LbHttpListener healthCheckInterval(Integer healthCheckInterval) {
        this.healthCheckInterval = healthCheckInterval;
        return this;
    }

    /**
     * set 否  健康检查正常的HTTP状态码，多个状态码用逗号分隔。取值：http_2xx（默认值） | http_3xx | http_4xx | http_5xx
     *
     * @param healthCheckHttpCode
     */
    public LbHttpListener healthCheckHttpCode(String healthCheckHttpCode) {
        this.healthCheckHttpCode = healthCheckHttpCode;
        return this;
    }


}