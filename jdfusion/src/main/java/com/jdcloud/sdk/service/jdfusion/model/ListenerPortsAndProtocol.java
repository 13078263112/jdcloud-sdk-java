/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.jdfusion.model;


/**
 * listenerPortsAndProtocol
 */
public class ListenerPortsAndProtocol  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 负载均衡实例前端使用的端口。
     */
    private Integer listenerPort;

    /**
     * 负载均衡实例前端使用的协议。
     */
    private String listenerProtocol;

    /**
     * 是否启用监听转发。
     */
    private String listenerForward;

    /**
     * 转发到的目的监听端口，必须是已经存在的HTTPS监听端口。
     */
    private Integer forwardPort;


    /**
     * get 负载均衡实例前端使用的端口。
     *
     * @return
     */
    public Integer getListenerPort() {
        return listenerPort;
    }

    /**
     * set 负载均衡实例前端使用的端口。
     *
     * @param listenerPort
     */
    public void setListenerPort(Integer listenerPort) {
        this.listenerPort = listenerPort;
    }

    /**
     * get 负载均衡实例前端使用的协议。
     *
     * @return
     */
    public String getListenerProtocol() {
        return listenerProtocol;
    }

    /**
     * set 负载均衡实例前端使用的协议。
     *
     * @param listenerProtocol
     */
    public void setListenerProtocol(String listenerProtocol) {
        this.listenerProtocol = listenerProtocol;
    }

    /**
     * get 是否启用监听转发。
     *
     * @return
     */
    public String getListenerForward() {
        return listenerForward;
    }

    /**
     * set 是否启用监听转发。
     *
     * @param listenerForward
     */
    public void setListenerForward(String listenerForward) {
        this.listenerForward = listenerForward;
    }

    /**
     * get 转发到的目的监听端口，必须是已经存在的HTTPS监听端口。
     *
     * @return
     */
    public Integer getForwardPort() {
        return forwardPort;
    }

    /**
     * set 转发到的目的监听端口，必须是已经存在的HTTPS监听端口。
     *
     * @param forwardPort
     */
    public void setForwardPort(Integer forwardPort) {
        this.forwardPort = forwardPort;
    }


    /**
     * set 负载均衡实例前端使用的端口。
     *
     * @param listenerPort
     */
    public ListenerPortsAndProtocol listenerPort(Integer listenerPort) {
        this.listenerPort = listenerPort;
        return this;
    }

    /**
     * set 负载均衡实例前端使用的协议。
     *
     * @param listenerProtocol
     */
    public ListenerPortsAndProtocol listenerProtocol(String listenerProtocol) {
        this.listenerProtocol = listenerProtocol;
        return this;
    }

    /**
     * set 是否启用监听转发。
     *
     * @param listenerForward
     */
    public ListenerPortsAndProtocol listenerForward(String listenerForward) {
        this.listenerForward = listenerForward;
        return this;
    }

    /**
     * set 转发到的目的监听端口，必须是已经存在的HTTPS监听端口。
     *
     * @param forwardPort
     */
    public ListenerPortsAndProtocol forwardPort(Integer forwardPort) {
        this.forwardPort = forwardPort;
        return this;
    }


}