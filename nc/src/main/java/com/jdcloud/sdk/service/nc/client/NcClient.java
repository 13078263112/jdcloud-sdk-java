/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 原生容器
 * 原生容器相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.nc.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.nc.model.DescribeContainersRequest;
import com.jdcloud.sdk.service.nc.model.DescribeContainersResponse;
import com.jdcloud.sdk.service.nc.client.DescribeContainersExecutor;
import com.jdcloud.sdk.service.nc.model.CreateContainersRequest;
import com.jdcloud.sdk.service.nc.model.CreateContainersResponse;
import com.jdcloud.sdk.service.nc.client.CreateContainersExecutor;
import com.jdcloud.sdk.service.nc.model.GetLogsRequest;
import com.jdcloud.sdk.service.nc.model.GetLogsResponse;
import com.jdcloud.sdk.service.nc.client.GetLogsExecutor;
import com.jdcloud.sdk.service.nc.model.DescribeSecretRequest;
import com.jdcloud.sdk.service.nc.model.DescribeSecretResponse;
import com.jdcloud.sdk.service.nc.client.DescribeSecretExecutor;
import com.jdcloud.sdk.service.nc.model.ModifyContainerAttributeRequest;
import com.jdcloud.sdk.service.nc.model.ModifyContainerAttributeResponse;
import com.jdcloud.sdk.service.nc.client.ModifyContainerAttributeExecutor;
import com.jdcloud.sdk.service.nc.model.DeleteContainerRequest;
import com.jdcloud.sdk.service.nc.model.DeleteContainerResponse;
import com.jdcloud.sdk.service.nc.client.DeleteContainerExecutor;
import com.jdcloud.sdk.service.nc.model.StopContainerRequest;
import com.jdcloud.sdk.service.nc.model.StopContainerResponse;
import com.jdcloud.sdk.service.nc.client.StopContainerExecutor;
import com.jdcloud.sdk.service.nc.model.StartContainerRequest;
import com.jdcloud.sdk.service.nc.model.StartContainerResponse;
import com.jdcloud.sdk.service.nc.client.StartContainerExecutor;
import com.jdcloud.sdk.service.nc.model.DisassociateElasticIpRequest;
import com.jdcloud.sdk.service.nc.model.DisassociateElasticIpResponse;
import com.jdcloud.sdk.service.nc.client.DisassociateElasticIpExecutor;
import com.jdcloud.sdk.service.nc.model.DescribeSecretsRequest;
import com.jdcloud.sdk.service.nc.model.DescribeSecretsResponse;
import com.jdcloud.sdk.service.nc.client.DescribeSecretsExecutor;
import com.jdcloud.sdk.service.nc.model.DescribeQuotaRequest;
import com.jdcloud.sdk.service.nc.model.DescribeQuotaResponse;
import com.jdcloud.sdk.service.nc.client.DescribeQuotaExecutor;
import com.jdcloud.sdk.service.nc.model.DescribeContainerRequest;
import com.jdcloud.sdk.service.nc.model.DescribeContainerResponse;
import com.jdcloud.sdk.service.nc.client.DescribeContainerExecutor;
import com.jdcloud.sdk.service.nc.model.DeleteSecretRequest;
import com.jdcloud.sdk.service.nc.model.DeleteSecretResponse;
import com.jdcloud.sdk.service.nc.client.DeleteSecretExecutor;
import com.jdcloud.sdk.service.nc.model.CreateSecretRequest;
import com.jdcloud.sdk.service.nc.model.CreateSecretResponse;
import com.jdcloud.sdk.service.nc.client.CreateSecretExecutor;
import com.jdcloud.sdk.service.nc.model.AssociateElasticIpRequest;
import com.jdcloud.sdk.service.nc.model.AssociateElasticIpResponse;
import com.jdcloud.sdk.service.nc.client.AssociateElasticIpExecutor;

/**
 * ncClient
 */
public class NcClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.0.7";
    public final static String DefaultEndpoint = "nc.jdcloud-api.com";
    public final static String ServiceName = "nc";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private NcClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 批量查询原生容器的详细信息&lt;br&gt;
此接口支持分页查询，默认每页20条。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeContainersResponse describeContainers(DescribeContainersRequest request) throws JdcloudSdkException {
        return new DescribeContainersExecutor().client(this).execute(request);
    }

    /**
     * 创建一台或多台指定配置容器。
- 创建容器需要通过实名认证
- 镜像
    - 容器的镜像通过镜像名称来确定
    - nginx:tag 或 mysql/mysql-server:tag 这样命名的镜像表示 docker hub 官方镜像
    - container-registry/image:tag 这样命名的镜像表示私有仓储的镜像
    - 私有仓储必须兼容 docker registry 认证机制，并通过 secret 来保存机密信息
- hostname 规范
    - 支持两种方式：以标签方式书写或以完整主机名方式书写
    - 标签规范
        - 0-9，a-z(不分大小写)和 -（减号），其他的都是无效的字符串
        - 不能以减号开始，也不能以减号结尾
        - 最小1个字符，最大63个字符
    - 完整的主机名由一系列标签与点连接组成
        - 标签与标签之间使用“.”(点)进行连接
        - 不能以“.”(点)开始，也不能以“.”(点)结尾
        - 整个主机名（包括标签以及分隔点“.”）最多有63个ASCII字符
- 网络配置
    - 指定主网卡配置信息
        - 必须指定一个子网
        - 一台云主机创建时必须指定一个安全组，至多指定 5 个安全组
        - 可以指定 elasticIp 规格来约束创建的弹性 IP，带宽取值范围 [1-200]Mbps，步进 1Mbps
        - 可以指定网卡的主 IP(primaryIpAddress)，该 IP 需要在子网 IP 范围内且未被占用，指定子网 IP 时 maxCount 只能为1
        - 安全组 securityGroup 需与子网 Subnet 在同一个私有网络 VPC 内
        - 主网卡 deviceIndex 设置为 1
- 存储
    - volume 分为 root volume 和 data volume，root volume 的挂载目录是 /，data volume 的挂载目录可以随意指定
    - volume 的底层存储介质当前只支持 cloud 类别，也就是云硬盘
    - 系统盘
        - 云硬盘类型可以选择 ssd、premium-hdd
        - 磁盘大小
            - ssd：范围 [10, 100]GB，步长为 10G
            - premium-hdd：范围 [20, 1000]GB，步长为 10G
        - 自动删除
            - 云盘默认跟随容器实例自动删除，如果是包年包月的数据盘或共享型数据盘，此参数不生效
        - 可以选择已存在的云硬盘
    - 数据盘
        - 云硬盘类型可以选择 ssd、premium-hdd
        - 磁盘大小
            - ssd：范围[20,1000]GB，步长为10G
            - premium-hdd：范围[20,3000]GB，步长为10G
        - 自动删除
            - 默认自动删除
        - 可以选择已存在的云硬盘
        - 单个容器最多可以挂载 7 个 data volume
- 计费
  - 弹性IP的计费模式，如果选择按用量类型可以单独设置，其它计费模式都以主机为准
  - 云硬盘的计费模式以主机为准
- 容器日志
    - 默认在本地分配10MB的存储空间，自动 rotate
- 其他
    - 创建完成后，容器状态为running
    - maxCount 为最大努力，不保证一定能达到 maxCount

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateContainersResponse createContainers(CreateContainersRequest request) throws JdcloudSdkException {
        return new CreateContainersExecutor().client(this).execute(request);
    }

    /**
     * 查询单个容器日志

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetLogsResponse getLogs(GetLogsRequest request) throws JdcloudSdkException {
        return new GetLogsExecutor().client(this).execute(request);
    }

    /**
     * 查询单个 secret 详情

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeSecretResponse describeSecret(DescribeSecretRequest request) throws JdcloudSdkException {
        return new DescribeSecretExecutor().client(this).execute(request);
    }

    /**
     * 修改容器的 名称 和 描述。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyContainerAttributeResponse modifyContainerAttribute(ModifyContainerAttributeRequest request) throws JdcloudSdkException {
        return new ModifyContainerAttributeExecutor().client(this).execute(request);
    }

    /**
     * 容器状态必须为 stopped、running 或 error状态。 &lt;br&gt;
按量付费的实例，如不主动删除将一直运行，不再使用的实例，可通过本接口主动停用。&lt;br&gt;
只能支持主动删除按量计费类型的实例。包年包月过期的容器也可以删除，其它的情况还请发工单系统。计费状态异常的容器无法删除。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteContainerResponse deleteContainer(DeleteContainerRequest request) throws JdcloudSdkException {
        return new DeleteContainerExecutor().client(this).execute(request);
    }

    /**
     * 停止处于运行状态的单个实例，处于任务执行中的容器无法启动。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopContainerResponse stopContainer(StopContainerRequest request) throws JdcloudSdkException {
        return new StopContainerExecutor().client(this).execute(request);
    }

    /**
     * 启动处于关闭状态的单个容器，处在任务执行中的容器无法启动。&lt;br&gt;
容器实例或其绑定的云盘已欠费时，容器将无法正常启动。&lt;br&gt;

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartContainerResponse startContainer(StartContainerRequest request) throws JdcloudSdkException {
        return new StartContainerExecutor().client(this).execute(request);
    }

    /**
     * 容器解绑公网 IP，解绑的是主网卡、主内网 IP 对应的弹性 IP.

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DisassociateElasticIpResponse disassociateElasticIp(DisassociateElasticIpRequest request) throws JdcloudSdkException {
        return new DisassociateElasticIpExecutor().client(this).execute(request);
    }

    /**
     * 查询 secret 列表。&lt;br&gt; 
此接口支持分页查询，默认每页20条。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeSecretsResponse describeSecrets(DescribeSecretsRequest request) throws JdcloudSdkException {
        return new DescribeSecretsExecutor().client(this).execute(request);
    }

    /**
     * 查询资源的配额，支持：原生容器 pod 和 secret.

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeQuotaResponse describeQuota(DescribeQuotaRequest request) throws JdcloudSdkException {
        return new DescribeQuotaExecutor().client(this).execute(request);
    }

    /**
     * 查询一台原生容器的详细信息

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeContainerResponse describeContainer(DescribeContainerRequest request) throws JdcloudSdkException {
        return new DescribeContainerExecutor().client(this).execute(request);
    }

    /**
     * 删除单个 secret

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteSecretResponse deleteSecret(DeleteSecretRequest request) throws JdcloudSdkException {
        return new DeleteSecretExecutor().client(this).execute(request);
    }

    /**
     * 创建一个 secret，用于存放镜像仓库机密相关信息。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateSecretResponse createSecret(CreateSecretRequest request) throws JdcloudSdkException {
        return new CreateSecretExecutor().client(this).execute(request);
    }

    /**
     * 容器绑定弹性公网 IP，绑定的是主网卡、主内网IP对应的弹性IP. &lt;br&gt;
一台云主机只能绑定一个弹性公网 IP(主网卡)，若主网卡已存在弹性公网IP，会返回错误。&lt;br&gt;
如果是黑名单中的用户，会返回错误。

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public AssociateElasticIpResponse associateElasticIp(AssociateElasticIpRequest request) throws JdcloudSdkException {
        return new AssociateElasticIpExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public NcClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private NcClient ncClient;

        public DefaultBuilder() {
            ncClient = new NcClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            ncClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            ncClient.httpRequestConfig = config;
            return this;
        }

        public NcClient build() throws JdcloudSdkException {

            if (ncClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                ncClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (ncClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("NcClient build error: jdcloud credentials provider not set");
                }
            }
            if (ncClient.httpRequestConfig == null) {
                ncClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (ncClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("NcClient build error: http request config not set");
                }
            }
            return ncClient;
        }

        public Builder environment(Environment environment) {
            ncClient.environment = environment;
            return this;
        }
    }
}
