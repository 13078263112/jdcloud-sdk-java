/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 京东云iotcard接口
 * iotcard相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.iotcard.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.iotcard.model.OnOffStatusRequest;
import com.jdcloud.sdk.service.iotcard.model.OnOffStatusResponse;
import com.jdcloud.sdk.service.iotcard.client.OnOffStatusExecutor;
import com.jdcloud.sdk.service.iotcard.model.CloseIotFlowRequest;
import com.jdcloud.sdk.service.iotcard.model.CloseIotFlowResponse;
import com.jdcloud.sdk.service.iotcard.client.CloseIotFlowExecutor;
import com.jdcloud.sdk.service.iotcard.model.OpenIotCardRequest;
import com.jdcloud.sdk.service.iotcard.model.OpenIotCardResponse;
import com.jdcloud.sdk.service.iotcard.client.OpenIotCardExecutor;
import com.jdcloud.sdk.service.iotcard.model.OpenIotFlowRequest;
import com.jdcloud.sdk.service.iotcard.model.OpenIotFlowResponse;
import com.jdcloud.sdk.service.iotcard.client.OpenIotFlowExecutor;
import com.jdcloud.sdk.service.iotcard.model.LifeStatusRequest;
import com.jdcloud.sdk.service.iotcard.model.LifeStatusResponse;
import com.jdcloud.sdk.service.iotcard.client.LifeStatusExecutor;
import com.jdcloud.sdk.service.iotcard.model.CloseIotCardRequest;
import com.jdcloud.sdk.service.iotcard.model.CloseIotCardResponse;
import com.jdcloud.sdk.service.iotcard.client.CloseIotCardExecutor;
import com.jdcloud.sdk.service.iotcard.model.GprsRealtimeInfoRequest;
import com.jdcloud.sdk.service.iotcard.model.GprsRealtimeInfoResponse;
import com.jdcloud.sdk.service.iotcard.client.GprsRealtimeInfoExecutor;
import com.jdcloud.sdk.service.iotcard.model.GprsStatusRequest;
import com.jdcloud.sdk.service.iotcard.model.GprsStatusResponse;
import com.jdcloud.sdk.service.iotcard.client.GprsStatusExecutor;

/**
 * iotcardClient
 */
public class IotcardClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.0";
    public final static String DefaultEndpoint = "openapi.myiot.jdcloud.com";
    public final static String ServiceName = "iotcard";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private IotcardClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 根据物联网卡iccid查询该卡的开关机状态信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public OnOffStatusResponse onOffStatus(OnOffStatusRequest request) throws JdcloudSdkException {
        return new OnOffStatusExecutor().client(this).execute(request);
    }

    /**
     * 物联网卡停流量操作
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CloseIotFlowResponse closeIotFlow(CloseIotFlowRequest request) throws JdcloudSdkException {
        return new CloseIotFlowExecutor().client(this).execute(request);
    }

    /**
     * 物联网卡开机操作
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public OpenIotCardResponse openIotCard(OpenIotCardRequest request) throws JdcloudSdkException {
        return new OpenIotCardExecutor().client(this).execute(request);
    }

    /**
     * 物联网卡开启流量操作
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public OpenIotFlowResponse openIotFlow(OpenIotFlowRequest request) throws JdcloudSdkException {
        return new OpenIotFlowExecutor().client(this).execute(request);
    }

    /**
     * 根据物联网卡iccid查询该卡的生命周期信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public LifeStatusResponse lifeStatus(LifeStatusRequest request) throws JdcloudSdkException {
        return new LifeStatusExecutor().client(this).execute(request);
    }

    /**
     * 物联网卡停机操作
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CloseIotCardResponse closeIotCard(CloseIotCardRequest request) throws JdcloudSdkException {
        return new CloseIotCardExecutor().client(this).execute(request);
    }

    /**
     * 根据物联网卡iccid查询该卡的当月套餐内的GPRS实时使用量
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GprsRealtimeInfoResponse gprsRealtimeInfo(GprsRealtimeInfoRequest request) throws JdcloudSdkException {
        return new GprsRealtimeInfoExecutor().client(this).execute(request);
    }

    /**
     * 根据物联网卡iccid查询该卡的gprs状态信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GprsStatusResponse gprsStatus(GprsStatusRequest request) throws JdcloudSdkException {
        return new GprsStatusExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public IotcardClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private IotcardClient iotcardClient;

        public DefaultBuilder() {
            iotcardClient = new IotcardClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            iotcardClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            iotcardClient.httpRequestConfig = config;
            return this;
        }

        public IotcardClient build() throws JdcloudSdkException {

            if (iotcardClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                iotcardClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (iotcardClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("IotcardClient build error: jdcloud credentials provider not set");
                }
            }
            if (iotcardClient.httpRequestConfig == null) {
                iotcardClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (iotcardClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("IotcardClient build error: http request config not set");
                }
            }
            return iotcardClient;
        }

        public Builder environment(Environment environment) {
            iotcardClient.environment = environment;
            return this;
        }
    }
}
