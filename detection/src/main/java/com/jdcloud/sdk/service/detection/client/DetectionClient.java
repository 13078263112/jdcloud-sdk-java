/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JCLOUD DETECTION SUBSCRIBE API
 * detection API
 *
 * OpenAPI spec version: v2
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.detection.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.detection.model.ValidateSiteMonitorAddressRequest;
import com.jdcloud.sdk.service.detection.model.ValidateSiteMonitorAddressResponse;
import com.jdcloud.sdk.service.detection.client.ValidateSiteMonitorAddressExecutor;
import com.jdcloud.sdk.service.detection.model.CreateProbeTaskRequest;
import com.jdcloud.sdk.service.detection.model.CreateProbeTaskResponse;
import com.jdcloud.sdk.service.detection.client.CreateProbeTaskExecutor;
import com.jdcloud.sdk.service.detection.model.TestSiteMonitorRequest;
import com.jdcloud.sdk.service.detection.model.TestSiteMonitorResponse;
import com.jdcloud.sdk.service.detection.client.TestSiteMonitorExecutor;
import com.jdcloud.sdk.service.detection.model.EnableSiteMonitorRequest;
import com.jdcloud.sdk.service.detection.model.EnableSiteMonitorResponse;
import com.jdcloud.sdk.service.detection.client.EnableSiteMonitorExecutor;
import com.jdcloud.sdk.service.detection.model.UpdateProbeTaskRequest;
import com.jdcloud.sdk.service.detection.model.UpdateProbeTaskResponse;
import com.jdcloud.sdk.service.detection.client.UpdateProbeTaskExecutor;
import com.jdcloud.sdk.service.detection.model.DescribeProbeHistoryRequest;
import com.jdcloud.sdk.service.detection.model.DescribeProbeHistoryResponse;
import com.jdcloud.sdk.service.detection.client.DescribeProbeHistoryExecutor;
import com.jdcloud.sdk.service.detection.model.DeleteProbeTaskRequest;
import com.jdcloud.sdk.service.detection.model.DeleteProbeTaskResponse;
import com.jdcloud.sdk.service.detection.client.DeleteProbeTaskExecutor;
import com.jdcloud.sdk.service.detection.model.DeleteSiteMonitorRequest;
import com.jdcloud.sdk.service.detection.model.DeleteSiteMonitorResponse;
import com.jdcloud.sdk.service.detection.client.DeleteSiteMonitorExecutor;
import com.jdcloud.sdk.service.detection.model.GetSiteMonitorSourceRequest;
import com.jdcloud.sdk.service.detection.model.GetSiteMonitorSourceResponse;
import com.jdcloud.sdk.service.detection.client.GetSiteMonitorSourceExecutor;
import com.jdcloud.sdk.service.detection.model.DescribeProbeTaskRequest;
import com.jdcloud.sdk.service.detection.model.DescribeProbeTaskResponse;
import com.jdcloud.sdk.service.detection.client.DescribeProbeTaskExecutor;
import com.jdcloud.sdk.service.detection.model.DescribeAgentStatusRequest;
import com.jdcloud.sdk.service.detection.model.DescribeAgentStatusResponse;
import com.jdcloud.sdk.service.detection.client.DescribeAgentStatusExecutor;
import com.jdcloud.sdk.service.detection.model.CreateSiteMonitorRequest;
import com.jdcloud.sdk.service.detection.model.CreateSiteMonitorResponse;
import com.jdcloud.sdk.service.detection.client.CreateSiteMonitorExecutor;
import com.jdcloud.sdk.service.detection.model.DiscribeProbesRequest;
import com.jdcloud.sdk.service.detection.model.DiscribeProbesResponse;
import com.jdcloud.sdk.service.detection.client.DiscribeProbesExecutor;
import com.jdcloud.sdk.service.detection.model.DescribeMetricDataAmRequest;
import com.jdcloud.sdk.service.detection.model.DescribeMetricDataAmResponse;
import com.jdcloud.sdk.service.detection.client.DescribeMetricDataAmExecutor;
import com.jdcloud.sdk.service.detection.model.GetSiteMonitorRequest;
import com.jdcloud.sdk.service.detection.model.GetSiteMonitorResponse;
import com.jdcloud.sdk.service.detection.client.GetSiteMonitorExecutor;
import com.jdcloud.sdk.service.detection.model.ProbeTaskEnableRequest;
import com.jdcloud.sdk.service.detection.model.ProbeTaskEnableResponse;
import com.jdcloud.sdk.service.detection.client.ProbeTaskEnableExecutor;
import com.jdcloud.sdk.service.detection.model.UpdateSiteMonitorRequest;
import com.jdcloud.sdk.service.detection.model.UpdateSiteMonitorResponse;
import com.jdcloud.sdk.service.detection.client.UpdateSiteMonitorExecutor;
import com.jdcloud.sdk.service.detection.model.GetSiteMonitorDataPointsRequest;
import com.jdcloud.sdk.service.detection.model.GetSiteMonitorDataPointsResponse;
import com.jdcloud.sdk.service.detection.client.GetSiteMonitorDataPointsExecutor;
import com.jdcloud.sdk.service.detection.model.DescribeProbeTasksRequest;
import com.jdcloud.sdk.service.detection.model.DescribeProbeTasksResponse;
import com.jdcloud.sdk.service.detection.client.DescribeProbeTasksExecutor;

/**
 * detectionClient
 */
public class DetectionClient extends JdcloudClient {

    public final static String ApiVersion = "v2";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.0";
    public final static String DefaultEndpoint = "detection.jdcloud-api.com";
    public final static String ServiceName = "detection";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private DetectionClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 检测站点监控地址是否有效
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ValidateSiteMonitorAddressResponse validateSiteMonitorAddress(ValidateSiteMonitorAddressRequest request) throws JdcloudSdkException {
        return new ValidateSiteMonitorAddressExecutor().client(this).execute(request);
    }

    /**
     * 创建可用性监控任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateProbeTaskResponse createProbeTask(CreateProbeTaskRequest request) throws JdcloudSdkException {
        return new CreateProbeTaskExecutor().client(this).execute(request);
    }

    /**
     * 测试站点监控参数
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public TestSiteMonitorResponse testSiteMonitor(TestSiteMonitorRequest request) throws JdcloudSdkException {
        return new TestSiteMonitorExecutor().client(this).execute(request);
    }

    /**
     * 启停站点监控任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public EnableSiteMonitorResponse enableSiteMonitor(EnableSiteMonitorRequest request) throws JdcloudSdkException {
        return new EnableSiteMonitorExecutor().client(this).execute(request);
    }

    /**
     * 修改可用性监控任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateProbeTaskResponse updateProbeTask(UpdateProbeTaskRequest request) throws JdcloudSdkException {
        return new UpdateProbeTaskExecutor().client(this).execute(request);
    }

    /**
     * 查询可用性监控任务的指定探测源的异常探测历史
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeProbeHistoryResponse describeProbeHistory(DescribeProbeHistoryRequest request) throws JdcloudSdkException {
        return new DescribeProbeHistoryExecutor().client(this).execute(request);
    }

    /**
     * 删除可用性监控任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteProbeTaskResponse deleteProbeTask(DeleteProbeTaskRequest request) throws JdcloudSdkException {
        return new DeleteProbeTaskExecutor().client(this).execute(request);
    }

    /**
     * 删除站点监控任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteSiteMonitorResponse deleteSiteMonitor(DeleteSiteMonitorRequest request) throws JdcloudSdkException {
        return new DeleteSiteMonitorExecutor().client(this).execute(request);
    }

    /**
     * 获取站点监控探针列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetSiteMonitorSourceResponse getSiteMonitorSource(GetSiteMonitorSourceRequest request) throws JdcloudSdkException {
        return new GetSiteMonitorSourceExecutor().client(this).execute(request);
    }

    /**
     * 查询可用性监控任务信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeProbeTaskResponse describeProbeTask(DescribeProbeTaskRequest request) throws JdcloudSdkException {
        return new DescribeProbeTaskExecutor().client(this).execute(request);
    }

    /**
     * 查询可用性监控agent状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeAgentStatusResponse describeAgentStatus(DescribeAgentStatusRequest request) throws JdcloudSdkException {
        return new DescribeAgentStatusExecutor().client(this).execute(request);
    }

    /**
     * 创建站点监控任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateSiteMonitorResponse createSiteMonitor(CreateSiteMonitorRequest request) throws JdcloudSdkException {
        return new CreateSiteMonitorExecutor().client(this).execute(request);
    }

    /**
     * 查询可用性监控任务的探测源列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DiscribeProbesResponse discribeProbes(DiscribeProbesRequest request) throws JdcloudSdkException {
        return new DiscribeProbesExecutor().client(this).execute(request);
    }

    /**
     * 查看可用性监控任务的监控数据
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeMetricDataAmResponse describeMetricDataAm(DescribeMetricDataAmRequest request) throws JdcloudSdkException {
        return new DescribeMetricDataAmExecutor().client(this).execute(request);
    }

    /**
     * 获取站点监控任务信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetSiteMonitorResponse getSiteMonitor(GetSiteMonitorRequest request) throws JdcloudSdkException {
        return new GetSiteMonitorExecutor().client(this).execute(request);
    }

    /**
     * 启用、禁用可用性监控任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ProbeTaskEnableResponse probeTaskEnable(ProbeTaskEnableRequest request) throws JdcloudSdkException {
        return new ProbeTaskEnableExecutor().client(this).execute(request);
    }

    /**
     * 修改站点监控任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateSiteMonitorResponse updateSiteMonitor(UpdateSiteMonitorRequest request) throws JdcloudSdkException {
        return new UpdateSiteMonitorExecutor().client(this).execute(request);
    }

    /**
     * 获取站点监控数据
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetSiteMonitorDataPointsResponse getSiteMonitorDataPoints(GetSiteMonitorDataPointsRequest request) throws JdcloudSdkException {
        return new GetSiteMonitorDataPointsExecutor().client(this).execute(request);
    }

    /**
     * 查询可用性监控任务列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DescribeProbeTasksResponse describeProbeTasks(DescribeProbeTasksRequest request) throws JdcloudSdkException {
        return new DescribeProbeTasksExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public DetectionClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private DetectionClient detectionClient;

        public DefaultBuilder() {
            detectionClient = new DetectionClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            detectionClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            detectionClient.httpRequestConfig = config;
            return this;
        }

        public DetectionClient build() throws JdcloudSdkException {

            if (detectionClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                detectionClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (detectionClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("DetectionClient build error: jdcloud credentials provider not set");
                }
            }
            if (detectionClient.httpRequestConfig == null) {
                detectionClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (detectionClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("DetectionClient build error: http request config not set");
                }
            }
            return detectionClient;
        }

        public Builder environment(Environment environment) {
            detectionClient.environment = environment;
            return this;
        }
    }
}
