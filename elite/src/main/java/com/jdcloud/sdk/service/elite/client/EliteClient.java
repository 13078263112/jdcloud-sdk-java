/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * elite相关API
 * elite相关API
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.elite.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.elite.model.JdxQueryPriceRequest;
import com.jdcloud.sdk.service.elite.model.JdxQueryPriceResponse;
import com.jdcloud.sdk.service.elite.client.JdxQueryPriceExecutor;
import com.jdcloud.sdk.service.elite.model.ListSaleServiceRequest;
import com.jdcloud.sdk.service.elite.model.ListSaleServiceResponse;
import com.jdcloud.sdk.service.elite.client.ListSaleServiceExecutor;
import com.jdcloud.sdk.service.elite.model.JdxQueryDeliveryInfoRequest;
import com.jdcloud.sdk.service.elite.model.JdxQueryDeliveryInfoResponse;
import com.jdcloud.sdk.service.elite.client.JdxQueryDeliveryInfoExecutor;
import com.jdcloud.sdk.service.elite.model.GetStoreServiceRequest;
import com.jdcloud.sdk.service.elite.model.GetStoreServiceResponse;
import com.jdcloud.sdk.service.elite.client.GetStoreServiceExecutor;
import com.jdcloud.sdk.service.elite.model.JdxReportOrderRequest;
import com.jdcloud.sdk.service.elite.model.JdxReportOrderResponse;
import com.jdcloud.sdk.service.elite.client.JdxReportOrderExecutor;
import com.jdcloud.sdk.service.elite.model.JdxCreateOrderRequest;
import com.jdcloud.sdk.service.elite.model.JdxCreateOrderResponse;
import com.jdcloud.sdk.service.elite.client.JdxCreateOrderExecutor;
import com.jdcloud.sdk.service.elite.model.GetSaleServiceByDeliverNumberRequest;
import com.jdcloud.sdk.service.elite.model.GetSaleServiceByDeliverNumberResponse;
import com.jdcloud.sdk.service.elite.client.GetSaleServiceByDeliverNumberExecutor;
import com.jdcloud.sdk.service.elite.model.JdxQueryProductRequest;
import com.jdcloud.sdk.service.elite.model.JdxQueryProductResponse;
import com.jdcloud.sdk.service.elite.client.JdxQueryProductExecutor;
import com.jdcloud.sdk.service.elite.model.ConfirmSaleServiceDeliveryRequest;
import com.jdcloud.sdk.service.elite.model.ConfirmSaleServiceDeliveryResponse;
import com.jdcloud.sdk.service.elite.client.ConfirmSaleServiceDeliveryExecutor;

/**
 * eliteClient
 */
public class EliteClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.0";
    public final static String DefaultEndpoint = "elite.cn-south-1.jdcloud-api.com";
    public final static String ServiceName = "elite";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private EliteClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查询价格
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public JdxQueryPriceResponse jdxQueryPrice(JdxQueryPriceRequest request) throws JdcloudSdkException {
        return new JdxQueryPriceExecutor().client(this).execute(request);
    }

    /**
     * 分页查询交付单信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ListSaleServiceResponse listSaleService(ListSaleServiceRequest request) throws JdcloudSdkException {
        return new ListSaleServiceExecutor().client(this).execute(request);
    }

    /**
     * 查询交付信息接口
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public JdxQueryDeliveryInfoResponse jdxQueryDeliveryInfo(JdxQueryDeliveryInfoRequest request) throws JdcloudSdkException {
        return new JdxQueryDeliveryInfoExecutor().client(this).execute(request);
    }

    /**
     * 获取云存服务信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetStoreServiceResponse getStoreService(GetStoreServiceRequest request) throws JdcloudSdkException {
        return new GetStoreServiceExecutor().client(this).execute(request);
    }

    /**
     * 上报订单
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public JdxReportOrderResponse jdxReportOrder(JdxReportOrderRequest request) throws JdcloudSdkException {
        return new JdxReportOrderExecutor().client(this).execute(request);
    }

    /**
     * 下单接口
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public JdxCreateOrderResponse jdxCreateOrder(JdxCreateOrderRequest request) throws JdcloudSdkException {
        return new JdxCreateOrderExecutor().client(this).execute(request);
    }

    /**
     * 根据交付单号查询交付单信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetSaleServiceByDeliverNumberResponse getSaleServiceByDeliverNumber(GetSaleServiceByDeliverNumberRequest request) throws JdcloudSdkException {
        return new GetSaleServiceByDeliverNumberExecutor().client(this).execute(request);
    }

    /**
     * 输出商品接口
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public JdxQueryProductResponse jdxQueryProduct(JdxQueryProductRequest request) throws JdcloudSdkException {
        return new JdxQueryProductExecutor().client(this).execute(request);
    }

    /**
     * 确认交付
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ConfirmSaleServiceDeliveryResponse confirmSaleServiceDelivery(ConfirmSaleServiceDeliveryRequest request) throws JdcloudSdkException {
        return new ConfirmSaleServiceDeliveryExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public EliteClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private EliteClient eliteClient;

        public DefaultBuilder() {
            eliteClient = new EliteClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            eliteClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            eliteClient.httpRequestConfig = config;
            return this;
        }

        public EliteClient build() throws JdcloudSdkException {

            if (eliteClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                eliteClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (eliteClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("EliteClient build error: jdcloud credentials provider not set");
                }
            }
            if (eliteClient.httpRequestConfig == null) {
                eliteClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (eliteClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("EliteClient build error: http request config not set");
                }
            }
            return eliteClient;
        }

        public Builder environment(Environment environment) {
            eliteClient.environment = environment;
            return this;
        }
    }
}
