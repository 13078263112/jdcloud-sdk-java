/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.mongodb.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;

/**
 * shardingDBInstanceSpec
 */
public class ShardingDBInstanceSpec  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 实例名称，名称只支持中文、数字、大小写字母及英文下划线“_”及中划线“-”，2-32个字符。
     */
    private String instanceName;

    /**
     * 数据库类型，默认为MongoDB。
     */
    private String engine;

    /**
     * 数据库版本，支持：3.4, 3.6；默认为3.6。
     */
    private String engineVersion;

    /**
     * mongos节点规格代码，必填。
     * Required:true
     */
    @Required
    private String mongosNodeType;

    /**
     * mongos节点数量，支持2-32个，必填。
     */
    private Integer mongosNodeNumber;

    /**
     * configserve节点规格代码，默认为mongo.m1.small。
     */
    private String configserverNodeType;

    /**
     * shard节点规格代码，必填。
     * Required:true
     */
    @Required
    private String shardNodeType;

    /**
     * shard节点存储空间，单位GB，取值10-1000,10的倍数，必填。
     * Required:true
     */
    @Required
    private Integer shardNodeStorageGB;

    /**
     * mongos节点数量，支持2-32个，必填。
     * Required:true
     */
    @Required
    private Integer shardNodeNumber;

    /**
     * 是否选择多可用区部署，默认为否。
     */
    private Boolean multiAZ;

    /**
     * 必填。单可用区部署，填写1个可用区；多可用区部署，依次填写每个mongos所在可用区，数量与mognos节点数量一致。
     * Required:true
     */
    @Required
    private List<String> mongosAzId;

    /**
     * 必填。单可用区部署，填写1个可用区；多可用区部署，需填写3个可用区，依次为副本集的primary、secondary、hidden所在的可用区，将应用到分片集群的shard节点和configserver节点的全部副本集。
     * Required:true
     */
    @Required
    private List<String> shardAzId;

    /**
     * VPCID
     * Required:true
     */
    @Required
    private String vpcId;

    /**
     * 子网ID
     * Required:true
     */
    @Required
    private String subnetId;

    /**
     * 密码，必须包含且只支持字母及数字，不少于8字符不超过16字符。
     */
    private String password;

    /**
     * 基于一个实例的备份创建新实例，如填写则restoreTime也需要填写。
     */
    private String originDBInstanceId;

    /**
     * 用户指定备份保留周期内的任意时间点，如2011-06-11T16:00:00Z。
     */
    private String restoreTime;

    /**
     * 存储类型，支持：LOCAL_SSD -本地盘SSD、EBS_SSD -云盘；默认值为：LOCAL_SSD。
     */
    private String instanceStorageType;

    /**
     * 实例数据加密(存储类型为云硬盘才支持数据加密). false：不加密; true：加密. 缺省为false.
     */
    private Boolean storageEncrypted;

    /**
     * 跨域服务ID，用于跨地域按时间点创建实例
     */
    private String serviceId;


    /**
     * get 实例名称，名称只支持中文、数字、大小写字母及英文下划线“_”及中划线“-”，2-32个字符。
     *
     * @return
     */
    public String getInstanceName() {
        return instanceName;
    }

    /**
     * set 实例名称，名称只支持中文、数字、大小写字母及英文下划线“_”及中划线“-”，2-32个字符。
     *
     * @param instanceName
     */
    public void setInstanceName(String instanceName) {
        this.instanceName = instanceName;
    }

    /**
     * get 数据库类型，默认为MongoDB。
     *
     * @return
     */
    public String getEngine() {
        return engine;
    }

    /**
     * set 数据库类型，默认为MongoDB。
     *
     * @param engine
     */
    public void setEngine(String engine) {
        this.engine = engine;
    }

    /**
     * get 数据库版本，支持：3.4, 3.6；默认为3.6。
     *
     * @return
     */
    public String getEngineVersion() {
        return engineVersion;
    }

    /**
     * set 数据库版本，支持：3.4, 3.6；默认为3.6。
     *
     * @param engineVersion
     */
    public void setEngineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
    }

    /**
     * get mongos节点规格代码，必填。
     *
     * @return
     */
    public String getMongosNodeType() {
        return mongosNodeType;
    }

    /**
     * set mongos节点规格代码，必填。
     *
     * @param mongosNodeType
     */
    public void setMongosNodeType(String mongosNodeType) {
        this.mongosNodeType = mongosNodeType;
    }

    /**
     * get mongos节点数量，支持2-32个，必填。
     *
     * @return
     */
    public Integer getMongosNodeNumber() {
        return mongosNodeNumber;
    }

    /**
     * set mongos节点数量，支持2-32个，必填。
     *
     * @param mongosNodeNumber
     */
    public void setMongosNodeNumber(Integer mongosNodeNumber) {
        this.mongosNodeNumber = mongosNodeNumber;
    }

    /**
     * get configserve节点规格代码，默认为mongo.m1.small。
     *
     * @return
     */
    public String getConfigserverNodeType() {
        return configserverNodeType;
    }

    /**
     * set configserve节点规格代码，默认为mongo.m1.small。
     *
     * @param configserverNodeType
     */
    public void setConfigserverNodeType(String configserverNodeType) {
        this.configserverNodeType = configserverNodeType;
    }

    /**
     * get shard节点规格代码，必填。
     *
     * @return
     */
    public String getShardNodeType() {
        return shardNodeType;
    }

    /**
     * set shard节点规格代码，必填。
     *
     * @param shardNodeType
     */
    public void setShardNodeType(String shardNodeType) {
        this.shardNodeType = shardNodeType;
    }

    /**
     * get shard节点存储空间，单位GB，取值10-1000,10的倍数，必填。
     *
     * @return
     */
    public Integer getShardNodeStorageGB() {
        return shardNodeStorageGB;
    }

    /**
     * set shard节点存储空间，单位GB，取值10-1000,10的倍数，必填。
     *
     * @param shardNodeStorageGB
     */
    public void setShardNodeStorageGB(Integer shardNodeStorageGB) {
        this.shardNodeStorageGB = shardNodeStorageGB;
    }

    /**
     * get mongos节点数量，支持2-32个，必填。
     *
     * @return
     */
    public Integer getShardNodeNumber() {
        return shardNodeNumber;
    }

    /**
     * set mongos节点数量，支持2-32个，必填。
     *
     * @param shardNodeNumber
     */
    public void setShardNodeNumber(Integer shardNodeNumber) {
        this.shardNodeNumber = shardNodeNumber;
    }

    /**
     * get 是否选择多可用区部署，默认为否。
     *
     * @return
     */
    public Boolean getMultiAZ() {
        return multiAZ;
    }

    /**
     * set 是否选择多可用区部署，默认为否。
     *
     * @param multiAZ
     */
    public void setMultiAZ(Boolean multiAZ) {
        this.multiAZ = multiAZ;
    }

    /**
     * get 必填。单可用区部署，填写1个可用区；多可用区部署，依次填写每个mongos所在可用区，数量与mognos节点数量一致。
     *
     * @return
     */
    public List<String> getMongosAzId() {
        return mongosAzId;
    }

    /**
     * set 必填。单可用区部署，填写1个可用区；多可用区部署，依次填写每个mongos所在可用区，数量与mognos节点数量一致。
     *
     * @param mongosAzId
     */
    public void setMongosAzId(List<String> mongosAzId) {
        this.mongosAzId = mongosAzId;
    }

    /**
     * get 必填。单可用区部署，填写1个可用区；多可用区部署，需填写3个可用区，依次为副本集的primary、secondary、hidden所在的可用区，将应用到分片集群的shard节点和configserver节点的全部副本集。
     *
     * @return
     */
    public List<String> getShardAzId() {
        return shardAzId;
    }

    /**
     * set 必填。单可用区部署，填写1个可用区；多可用区部署，需填写3个可用区，依次为副本集的primary、secondary、hidden所在的可用区，将应用到分片集群的shard节点和configserver节点的全部副本集。
     *
     * @param shardAzId
     */
    public void setShardAzId(List<String> shardAzId) {
        this.shardAzId = shardAzId;
    }

    /**
     * get VPCID
     *
     * @return
     */
    public String getVpcId() {
        return vpcId;
    }

    /**
     * set VPCID
     *
     * @param vpcId
     */
    public void setVpcId(String vpcId) {
        this.vpcId = vpcId;
    }

    /**
     * get 子网ID
     *
     * @return
     */
    public String getSubnetId() {
        return subnetId;
    }

    /**
     * set 子网ID
     *
     * @param subnetId
     */
    public void setSubnetId(String subnetId) {
        this.subnetId = subnetId;
    }

    /**
     * get 密码，必须包含且只支持字母及数字，不少于8字符不超过16字符。
     *
     * @return
     */
    public String getPassword() {
        return password;
    }

    /**
     * set 密码，必须包含且只支持字母及数字，不少于8字符不超过16字符。
     *
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * get 基于一个实例的备份创建新实例，如填写则restoreTime也需要填写。
     *
     * @return
     */
    public String getOriginDBInstanceId() {
        return originDBInstanceId;
    }

    /**
     * set 基于一个实例的备份创建新实例，如填写则restoreTime也需要填写。
     *
     * @param originDBInstanceId
     */
    public void setOriginDBInstanceId(String originDBInstanceId) {
        this.originDBInstanceId = originDBInstanceId;
    }

    /**
     * get 用户指定备份保留周期内的任意时间点，如2011-06-11T16:00:00Z。
     *
     * @return
     */
    public String getRestoreTime() {
        return restoreTime;
    }

    /**
     * set 用户指定备份保留周期内的任意时间点，如2011-06-11T16:00:00Z。
     *
     * @param restoreTime
     */
    public void setRestoreTime(String restoreTime) {
        this.restoreTime = restoreTime;
    }

    /**
     * get 存储类型，支持：LOCAL_SSD -本地盘SSD、EBS_SSD -云盘；默认值为：LOCAL_SSD。
     *
     * @return
     */
    public String getInstanceStorageType() {
        return instanceStorageType;
    }

    /**
     * set 存储类型，支持：LOCAL_SSD -本地盘SSD、EBS_SSD -云盘；默认值为：LOCAL_SSD。
     *
     * @param instanceStorageType
     */
    public void setInstanceStorageType(String instanceStorageType) {
        this.instanceStorageType = instanceStorageType;
    }

    /**
     * get 实例数据加密(存储类型为云硬盘才支持数据加密). false：不加密; true：加密. 缺省为false.
     *
     * @return
     */
    public Boolean getStorageEncrypted() {
        return storageEncrypted;
    }

    /**
     * set 实例数据加密(存储类型为云硬盘才支持数据加密). false：不加密; true：加密. 缺省为false.
     *
     * @param storageEncrypted
     */
    public void setStorageEncrypted(Boolean storageEncrypted) {
        this.storageEncrypted = storageEncrypted;
    }

    /**
     * get 跨域服务ID，用于跨地域按时间点创建实例
     *
     * @return
     */
    public String getServiceId() {
        return serviceId;
    }

    /**
     * set 跨域服务ID，用于跨地域按时间点创建实例
     *
     * @param serviceId
     */
    public void setServiceId(String serviceId) {
        this.serviceId = serviceId;
    }


    /**
     * set 实例名称，名称只支持中文、数字、大小写字母及英文下划线“_”及中划线“-”，2-32个字符。
     *
     * @param instanceName
     */
    public ShardingDBInstanceSpec instanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * set 数据库类型，默认为MongoDB。
     *
     * @param engine
     */
    public ShardingDBInstanceSpec engine(String engine) {
        this.engine = engine;
        return this;
    }

    /**
     * set 数据库版本，支持：3.4, 3.6；默认为3.6。
     *
     * @param engineVersion
     */
    public ShardingDBInstanceSpec engineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }

    /**
     * set mongos节点规格代码，必填。
     *
     * @param mongosNodeType
     */
    public ShardingDBInstanceSpec mongosNodeType(String mongosNodeType) {
        this.mongosNodeType = mongosNodeType;
        return this;
    }

    /**
     * set mongos节点数量，支持2-32个，必填。
     *
     * @param mongosNodeNumber
     */
    public ShardingDBInstanceSpec mongosNodeNumber(Integer mongosNodeNumber) {
        this.mongosNodeNumber = mongosNodeNumber;
        return this;
    }

    /**
     * set configserve节点规格代码，默认为mongo.m1.small。
     *
     * @param configserverNodeType
     */
    public ShardingDBInstanceSpec configserverNodeType(String configserverNodeType) {
        this.configserverNodeType = configserverNodeType;
        return this;
    }

    /**
     * set shard节点规格代码，必填。
     *
     * @param shardNodeType
     */
    public ShardingDBInstanceSpec shardNodeType(String shardNodeType) {
        this.shardNodeType = shardNodeType;
        return this;
    }

    /**
     * set shard节点存储空间，单位GB，取值10-1000,10的倍数，必填。
     *
     * @param shardNodeStorageGB
     */
    public ShardingDBInstanceSpec shardNodeStorageGB(Integer shardNodeStorageGB) {
        this.shardNodeStorageGB = shardNodeStorageGB;
        return this;
    }

    /**
     * set mongos节点数量，支持2-32个，必填。
     *
     * @param shardNodeNumber
     */
    public ShardingDBInstanceSpec shardNodeNumber(Integer shardNodeNumber) {
        this.shardNodeNumber = shardNodeNumber;
        return this;
    }

    /**
     * set 是否选择多可用区部署，默认为否。
     *
     * @param multiAZ
     */
    public ShardingDBInstanceSpec multiAZ(Boolean multiAZ) {
        this.multiAZ = multiAZ;
        return this;
    }

    /**
     * set 必填。单可用区部署，填写1个可用区；多可用区部署，依次填写每个mongos所在可用区，数量与mognos节点数量一致。
     *
     * @param mongosAzId
     */
    public ShardingDBInstanceSpec mongosAzId(List<String> mongosAzId) {
        this.mongosAzId = mongosAzId;
        return this;
    }

    /**
     * set 必填。单可用区部署，填写1个可用区；多可用区部署，需填写3个可用区，依次为副本集的primary、secondary、hidden所在的可用区，将应用到分片集群的shard节点和configserver节点的全部副本集。
     *
     * @param shardAzId
     */
    public ShardingDBInstanceSpec shardAzId(List<String> shardAzId) {
        this.shardAzId = shardAzId;
        return this;
    }

    /**
     * set VPCID
     *
     * @param vpcId
     */
    public ShardingDBInstanceSpec vpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * set 子网ID
     *
     * @param subnetId
     */
    public ShardingDBInstanceSpec subnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * set 密码，必须包含且只支持字母及数字，不少于8字符不超过16字符。
     *
     * @param password
     */
    public ShardingDBInstanceSpec password(String password) {
        this.password = password;
        return this;
    }

    /**
     * set 基于一个实例的备份创建新实例，如填写则restoreTime也需要填写。
     *
     * @param originDBInstanceId
     */
    public ShardingDBInstanceSpec originDBInstanceId(String originDBInstanceId) {
        this.originDBInstanceId = originDBInstanceId;
        return this;
    }

    /**
     * set 用户指定备份保留周期内的任意时间点，如2011-06-11T16:00:00Z。
     *
     * @param restoreTime
     */
    public ShardingDBInstanceSpec restoreTime(String restoreTime) {
        this.restoreTime = restoreTime;
        return this;
    }

    /**
     * set 存储类型，支持：LOCAL_SSD -本地盘SSD、EBS_SSD -云盘；默认值为：LOCAL_SSD。
     *
     * @param instanceStorageType
     */
    public ShardingDBInstanceSpec instanceStorageType(String instanceStorageType) {
        this.instanceStorageType = instanceStorageType;
        return this;
    }

    /**
     * set 实例数据加密(存储类型为云硬盘才支持数据加密). false：不加密; true：加密. 缺省为false.
     *
     * @param storageEncrypted
     */
    public ShardingDBInstanceSpec storageEncrypted(Boolean storageEncrypted) {
        this.storageEncrypted = storageEncrypted;
        return this;
    }

    /**
     * set 跨域服务ID，用于跨地域按时间点创建实例
     *
     * @param serviceId
     */
    public ShardingDBInstanceSpec serviceId(String serviceId) {
        this.serviceId = serviceId;
        return this;
    }


    /**
     * add item to 必填。单可用区部署，填写1个可用区；多可用区部署，依次填写每个mongos所在可用区，数量与mognos节点数量一致。
     *
     * @param mongosAzId
     */
    public void addMongosAzId(String mongosAzId) {
        if (this.mongosAzId == null) {
            this.mongosAzId = new ArrayList<>();
        }
        this.mongosAzId.add(mongosAzId);
    }

    /**
     * add item to 必填。单可用区部署，填写1个可用区；多可用区部署，需填写3个可用区，依次为副本集的primary、secondary、hidden所在的可用区，将应用到分片集群的shard节点和configserver节点的全部副本集。
     *
     * @param shardAzId
     */
    public void addShardAzId(String shardAzId) {
        if (this.shardAzId == null) {
            this.shardAzId = new ArrayList<>();
        }
        this.shardAzId.add(shardAzId);
    }

}