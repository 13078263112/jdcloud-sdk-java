/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 云流水线
 * 云流水线API
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.pipeline.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.pipeline.model.GetPipelinesRequest;
import com.jdcloud.sdk.service.pipeline.model.GetPipelinesResponse;
import com.jdcloud.sdk.service.pipeline.client.GetPipelinesExecutor;
import com.jdcloud.sdk.service.pipeline.model.StartPipelineRequest;
import com.jdcloud.sdk.service.pipeline.model.StartPipelineResponse;
import com.jdcloud.sdk.service.pipeline.client.StartPipelineExecutor;
import com.jdcloud.sdk.service.pipeline.model.CreatePipelineRequest;
import com.jdcloud.sdk.service.pipeline.model.CreatePipelineResponse;
import com.jdcloud.sdk.service.pipeline.client.CreatePipelineExecutor;
import com.jdcloud.sdk.service.pipeline.model.UpdatePipelineRequest;
import com.jdcloud.sdk.service.pipeline.model.UpdatePipelineResponse;
import com.jdcloud.sdk.service.pipeline.client.UpdatePipelineExecutor;
import com.jdcloud.sdk.service.pipeline.model.ReadFileRequest;
import com.jdcloud.sdk.service.pipeline.model.ReadFileResponse;
import com.jdcloud.sdk.service.pipeline.client.ReadFileExecutor;
import com.jdcloud.sdk.service.pipeline.model.GetPipelineRequest;
import com.jdcloud.sdk.service.pipeline.model.GetPipelineResponse;
import com.jdcloud.sdk.service.pipeline.client.GetPipelineExecutor;
import com.jdcloud.sdk.service.pipeline.model.GetLimitsRequest;
import com.jdcloud.sdk.service.pipeline.model.GetLimitsResponse;
import com.jdcloud.sdk.service.pipeline.client.GetLimitsExecutor;
import com.jdcloud.sdk.service.pipeline.model.DeletePipelineRequest;
import com.jdcloud.sdk.service.pipeline.model.DeletePipelineResponse;
import com.jdcloud.sdk.service.pipeline.client.DeletePipelineExecutor;
import com.jdcloud.sdk.service.pipeline.model.GetPipelineInstancesRequest;
import com.jdcloud.sdk.service.pipeline.model.GetPipelineInstancesResponse;
import com.jdcloud.sdk.service.pipeline.client.GetPipelineInstancesExecutor;
import com.jdcloud.sdk.service.pipeline.model.ManualActionRequest;
import com.jdcloud.sdk.service.pipeline.model.ManualActionResponse;
import com.jdcloud.sdk.service.pipeline.client.ManualActionExecutor;
import com.jdcloud.sdk.service.pipeline.model.GetPipelineInstanceRequest;
import com.jdcloud.sdk.service.pipeline.model.GetPipelineInstanceResponse;
import com.jdcloud.sdk.service.pipeline.client.GetPipelineInstanceExecutor;
import com.jdcloud.sdk.service.pipeline.model.StopPipelineInstanceRequest;
import com.jdcloud.sdk.service.pipeline.model.StopPipelineInstanceResponse;
import com.jdcloud.sdk.service.pipeline.client.StopPipelineInstanceExecutor;
import com.jdcloud.sdk.service.pipeline.model.GetSourceProvidersRequest;
import com.jdcloud.sdk.service.pipeline.model.GetSourceProvidersResponse;
import com.jdcloud.sdk.service.pipeline.client.GetSourceProvidersExecutor;
import com.jdcloud.sdk.service.pipeline.model.GetOperationProvidersRequest;
import com.jdcloud.sdk.service.pipeline.model.GetOperationProvidersResponse;
import com.jdcloud.sdk.service.pipeline.client.GetOperationProvidersExecutor;
import com.jdcloud.sdk.service.pipeline.model.GetPipelineInstancesByUuidsRequest;
import com.jdcloud.sdk.service.pipeline.model.GetPipelineInstancesByUuidsResponse;
import com.jdcloud.sdk.service.pipeline.client.GetPipelineInstancesByUuidsExecutor;
import com.jdcloud.sdk.service.pipeline.model.GetRegionsRequest;
import com.jdcloud.sdk.service.pipeline.model.GetRegionsResponse;
import com.jdcloud.sdk.service.pipeline.client.GetRegionsExecutor;

/**
 * pipelineClient
 */
public class PipelineClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.1.1";
    public final static String DefaultEndpoint = "pipeline.jdcloud-api.com";
    public final static String ServiceName = "pipeline";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private PipelineClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 查询获取流水线任务列表，并显示最后一次执行的状态或结果信息
/v1/regions/cn-south-1?sorts.1.name&#x3D;startedAt&amp;sorts.1.direction&#x3D;desc&amp;pageNumber&#x3D;1&amp;pageSize&#x3D;10&amp;filters.1.name&#x3D;name&amp;filters.1.values.1&#x3D;我的pipeline

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPipelinesResponse getPipelines(GetPipelinesRequest request) throws JdcloudSdkException {
        return new GetPipelinesExecutor().client(this).execute(request);
    }

    /**
     * 根据uuid启动一个流水线任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartPipelineResponse startPipeline(StartPipelineRequest request) throws JdcloudSdkException {
        return new StartPipelineExecutor().client(this).execute(request);
    }

    /**
     * 新建流水线任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreatePipelineResponse createPipeline(CreatePipelineRequest request) throws JdcloudSdkException {
        return new CreatePipelineExecutor().client(this).execute(request);
    }

    /**
     * 更新流水线任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdatePipelineResponse updatePipeline(UpdatePipelineRequest request) throws JdcloudSdkException {
        return new UpdatePipelineExecutor().client(this).execute(request);
    }

    /**
     * 上传文件，返回文件内容
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ReadFileResponse readFile(ReadFileRequest request) throws JdcloudSdkException {
        return new ReadFileExecutor().client(this).execute(request);
    }

    /**
     * 根据uuid获取流水线任务的配置信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPipelineResponse getPipeline(GetPipelineRequest request) throws JdcloudSdkException {
        return new GetPipelineExecutor().client(this).execute(request);
    }

    /**
     * 查询用户限制
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetLimitsResponse getLimits(GetLimitsRequest request) throws JdcloudSdkException {
        return new GetLimitsExecutor().client(this).execute(request);
    }

    /**
     * 删除一个流水线任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeletePipelineResponse deletePipeline(DeletePipelineRequest request) throws JdcloudSdkException {
        return new DeletePipelineExecutor().client(this).execute(request);
    }

    /**
     * 查询流水线执行历史列表
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPipelineInstancesResponse getPipelineInstances(GetPipelineInstancesRequest request) throws JdcloudSdkException {
        return new GetPipelineInstancesExecutor().client(this).execute(request);
    }

    /**
     * 查询多个指定流水线执行及状态信息

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ManualActionResponse manualAction(ManualActionRequest request) throws JdcloudSdkException {
        return new ManualActionExecutor().client(this).execute(request);
    }

    /**
     * 查询流水线执行结果及状态信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPipelineInstanceResponse getPipelineInstance(GetPipelineInstanceRequest request) throws JdcloudSdkException {
        return new GetPipelineInstanceExecutor().client(this).execute(request);
    }

    /**
     * 停止流水线的一次执行
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopPipelineInstanceResponse stopPipelineInstance(StopPipelineInstanceRequest request) throws JdcloudSdkException {
        return new StopPipelineInstanceExecutor().client(this).execute(request);
    }

    /**
     * 获取可选的源提供商
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetSourceProvidersResponse getSourceProviders(GetSourceProvidersRequest request) throws JdcloudSdkException {
        return new GetSourceProvidersExecutor().client(this).execute(request);
    }

    /**
     * 操作提供商
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetOperationProvidersResponse getOperationProviders(GetOperationProvidersRequest request) throws JdcloudSdkException {
        return new GetOperationProvidersExecutor().client(this).execute(request);
    }

    /**
     * 根据条件查询流水线执行历史

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetPipelineInstancesByUuidsResponse getPipelineInstancesByUuids(GetPipelineInstancesByUuidsRequest request) throws JdcloudSdkException {
        return new GetPipelineInstancesByUuidsExecutor().client(this).execute(request);
    }

    /**
     * 可选地域
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetRegionsResponse getRegions(GetRegionsRequest request) throws JdcloudSdkException {
        return new GetRegionsExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public PipelineClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private PipelineClient pipelineClient;

        public DefaultBuilder() {
            pipelineClient = new PipelineClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            pipelineClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            pipelineClient.httpRequestConfig = config;
            return this;
        }

        public PipelineClient build() throws JdcloudSdkException {

            if (pipelineClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                pipelineClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (pipelineClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("PipelineClient build error: jdcloud credentials provider not set");
                }
            }
            if (pipelineClient.httpRequestConfig == null) {
                pipelineClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (pipelineClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("PipelineClient build error: http request config not set");
                }
            }
            return pipelineClient;
        }

        public Builder environment(Environment environment) {
            pipelineClient.environment = environment;
            return this;
        }
    }
}
