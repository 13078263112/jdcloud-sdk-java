/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * pipelineInstance
 * API OF Pipeline Create|Update|Read|Delete|Execute
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.pipeline.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.common.model.Sort;
import com.jdcloud.sdk.service.common.model.Filter;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 根据条件查询流水线执行历史

 */
public class GetPipelineInstancesByUuidsRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 流水线执行实例ID，多个ID用逗号分隔
     * Required:true
     */
    @Required
    private String uuids;

    /**
     * 流水线执行的状态，如果isSimple是true，只显示每个stage的状态, 而stage中的action状态将被忽略
     */
    private Boolean isSimple;

    /**
     * 页码；默认为1
     */
    private Integer pageNumber;

    /**
     * 分页大小；默认为10；取值范围[10, 100]
     */
    private Integer pageSize;

    /**
     * sorts
     */
    private List<Sort> sorts;

    /**
     * 根据流水线名称查询
     */
    private List<Filter> filters;

    /**
     * Region ID
     * Required:true
     */
    @Required
    private String regionId;


    /**
     * get 流水线执行实例ID，多个ID用逗号分隔
     *
     * @return
     */
    public String getUuids() {
        return uuids;
    }

    /**
     * set 流水线执行实例ID，多个ID用逗号分隔
     *
     * @param uuids
     */
    public void setUuids(String uuids) {
        this.uuids = uuids;
    }

    /**
     * get 流水线执行的状态，如果isSimple是true，只显示每个stage的状态, 而stage中的action状态将被忽略
     *
     * @return
     */
    public Boolean getIsSimple() {
        return isSimple;
    }

    /**
     * set 流水线执行的状态，如果isSimple是true，只显示每个stage的状态, 而stage中的action状态将被忽略
     *
     * @param isSimple
     */
    public void setIsSimple(Boolean isSimple) {
        this.isSimple = isSimple;
    }

    /**
     * get 页码；默认为1
     *
     * @return
     */
    public Integer getPageNumber() {
        return pageNumber;
    }

    /**
     * set 页码；默认为1
     *
     * @param pageNumber
     */
    public void setPageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
    }

    /**
     * get 分页大小；默认为10；取值范围[10, 100]
     *
     * @return
     */
    public Integer getPageSize() {
        return pageSize;
    }

    /**
     * set 分页大小；默认为10；取值范围[10, 100]
     *
     * @param pageSize
     */
    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * get sorts
     *
     * @return
     */
    public List<Sort> getSorts() {
        return sorts;
    }

    /**
     * set sorts
     *
     * @param sorts
     */
    public void setSorts(List<Sort> sorts) {
        this.sorts = sorts;
    }

    /**
     * get 根据流水线名称查询
     *
     * @return
     */
    public List<Filter> getFilters() {
        return filters;
    }

    /**
     * set 根据流水线名称查询
     *
     * @param filters
     */
    public void setFilters(List<Filter> filters) {
        this.filters = filters;
    }

    /**
     * get Region ID
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set Region ID
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }


    /**
     * set 流水线执行实例ID，多个ID用逗号分隔
     *
     * @param uuids
     */
    public GetPipelineInstancesByUuidsRequest uuids(String uuids) {
        this.uuids = uuids;
        return this;
    }

    /**
     * set 流水线执行的状态，如果isSimple是true，只显示每个stage的状态, 而stage中的action状态将被忽略
     *
     * @param isSimple
     */
    public GetPipelineInstancesByUuidsRequest isSimple(Boolean isSimple) {
        this.isSimple = isSimple;
        return this;
    }

    /**
     * set 页码；默认为1
     *
     * @param pageNumber
     */
    public GetPipelineInstancesByUuidsRequest pageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }

    /**
     * set 分页大小；默认为10；取值范围[10, 100]
     *
     * @param pageSize
     */
    public GetPipelineInstancesByUuidsRequest pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * set sorts
     *
     * @param sorts
     */
    public GetPipelineInstancesByUuidsRequest sorts(List<Sort> sorts) {
        this.sorts = sorts;
        return this;
    }

    /**
     * set 根据流水线名称查询
     *
     * @param filters
     */
    public GetPipelineInstancesByUuidsRequest filters(List<Filter> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * set Region ID
     *
     * @param regionId
     */
    public GetPipelineInstancesByUuidsRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }


    /**
     * add item to sorts
     *
     * @param sort
     */
    public void addSort(Sort sort) {
        if (this.sorts == null) {
            this.sorts = new ArrayList<>();
        }
        this.sorts.add(sort);
    }

    /**
     * add item to 根据流水线名称查询
     *
     * @param filter
     */
    public void addFilter(Filter filter) {
        if (this.filters == null) {
            this.filters = new ArrayList<>();
        }
        this.filters.add(filter);
    }

}