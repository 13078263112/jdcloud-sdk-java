/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.compile.model;

import java.util.List;
import java.util.ArrayList;

/**
 * config
 */
public class Config  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 运行镜像
     */
    private List<ImageDefine> image;

    /**
     * 源提供商选项
     */
    private List<CodeTypeDefine> codeType;

    /**
     * 构建存放
     */
    private List<OssDefine> oss;

    /**
     * 超时时间
     */
    private List<TimeoutDefine> timeout;

    /**
     * 计算类型
     */
    private List<ComputeTypeDefine> computeType;

    /**
     * 邮件类型
     */
    private List<MailTypeDefine> mailType;

    /**
     * 编译类型
     */
    private List<CompilerTypeDefine> compilerType;


    /**
     * get 运行镜像
     *
     * @return
     */
    public List<ImageDefine> getImage() {
        return image;
    }

    /**
     * set 运行镜像
     *
     * @param image
     */
    public void setImage(List<ImageDefine> image) {
        this.image = image;
    }

    /**
     * get 源提供商选项
     *
     * @return
     */
    public List<CodeTypeDefine> getCodeType() {
        return codeType;
    }

    /**
     * set 源提供商选项
     *
     * @param codeType
     */
    public void setCodeType(List<CodeTypeDefine> codeType) {
        this.codeType = codeType;
    }

    /**
     * get 构建存放
     *
     * @return
     */
    public List<OssDefine> getOss() {
        return oss;
    }

    /**
     * set 构建存放
     *
     * @param oss
     */
    public void setOss(List<OssDefine> oss) {
        this.oss = oss;
    }

    /**
     * get 超时时间
     *
     * @return
     */
    public List<TimeoutDefine> getTimeout() {
        return timeout;
    }

    /**
     * set 超时时间
     *
     * @param timeout
     */
    public void setTimeout(List<TimeoutDefine> timeout) {
        this.timeout = timeout;
    }

    /**
     * get 计算类型
     *
     * @return
     */
    public List<ComputeTypeDefine> getComputeType() {
        return computeType;
    }

    /**
     * set 计算类型
     *
     * @param computeType
     */
    public void setComputeType(List<ComputeTypeDefine> computeType) {
        this.computeType = computeType;
    }

    /**
     * get 邮件类型
     *
     * @return
     */
    public List<MailTypeDefine> getMailType() {
        return mailType;
    }

    /**
     * set 邮件类型
     *
     * @param mailType
     */
    public void setMailType(List<MailTypeDefine> mailType) {
        this.mailType = mailType;
    }

    /**
     * get 编译类型
     *
     * @return
     */
    public List<CompilerTypeDefine> getCompilerType() {
        return compilerType;
    }

    /**
     * set 编译类型
     *
     * @param compilerType
     */
    public void setCompilerType(List<CompilerTypeDefine> compilerType) {
        this.compilerType = compilerType;
    }


    /**
     * set 运行镜像
     *
     * @param image
     */
    public Config image(List<ImageDefine> image) {
        this.image = image;
        return this;
    }

    /**
     * set 源提供商选项
     *
     * @param codeType
     */
    public Config codeType(List<CodeTypeDefine> codeType) {
        this.codeType = codeType;
        return this;
    }

    /**
     * set 构建存放
     *
     * @param oss
     */
    public Config oss(List<OssDefine> oss) {
        this.oss = oss;
        return this;
    }

    /**
     * set 超时时间
     *
     * @param timeout
     */
    public Config timeout(List<TimeoutDefine> timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * set 计算类型
     *
     * @param computeType
     */
    public Config computeType(List<ComputeTypeDefine> computeType) {
        this.computeType = computeType;
        return this;
    }

    /**
     * set 邮件类型
     *
     * @param mailType
     */
    public Config mailType(List<MailTypeDefine> mailType) {
        this.mailType = mailType;
        return this;
    }

    /**
     * set 编译类型
     *
     * @param compilerType
     */
    public Config compilerType(List<CompilerTypeDefine> compilerType) {
        this.compilerType = compilerType;
        return this;
    }


    /**
     * add item to 运行镜像
     *
     * @param image
     */
    public void addImage(ImageDefine image) {
        if (this.image == null) {
            this.image = new ArrayList<>();
        }
        this.image.add(image);
    }

    /**
     * add item to 源提供商选项
     *
     * @param codeType
     */
    public void addCodeType(CodeTypeDefine codeType) {
        if (this.codeType == null) {
            this.codeType = new ArrayList<>();
        }
        this.codeType.add(codeType);
    }

    /**
     * add item to 构建存放
     *
     * @param os
     */
    public void addOs(OssDefine os) {
        if (this.oss == null) {
            this.oss = new ArrayList<>();
        }
        this.oss.add(os);
    }

    /**
     * add item to 超时时间
     *
     * @param timeout
     */
    public void addTimeout(TimeoutDefine timeout) {
        if (this.timeout == null) {
            this.timeout = new ArrayList<>();
        }
        this.timeout.add(timeout);
    }

    /**
     * add item to 计算类型
     *
     * @param computeType
     */
    public void addComputeType(ComputeTypeDefine computeType) {
        if (this.computeType == null) {
            this.computeType = new ArrayList<>();
        }
        this.computeType.add(computeType);
    }

    /**
     * add item to 邮件类型
     *
     * @param mailType
     */
    public void addMailType(MailTypeDefine mailType) {
        if (this.mailType == null) {
            this.mailType = new ArrayList<>();
        }
        this.mailType.add(mailType);
    }

    /**
     * add item to 编译类型
     *
     * @param compilerType
     */
    public void addCompilerType(CompilerTypeDefine compilerType) {
        if (this.compilerType == null) {
            this.compilerType = new ArrayList<>();
        }
        this.compilerType.add(compilerType);
    }

}