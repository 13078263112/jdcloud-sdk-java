/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * job api
 * API COMPILE CODE TO PACKAGE
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.compile.model;

import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * jobRequest
 */
public class JobRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 项目名称
     * Required:true
     */
    @Required
    private String name;

    /**
     * 源提供商，代码存储类型代码存储类型， 目前只支持github
     * Required:true
     */
    @Required
    private String codeType;

    /**
     * 仓库地址，代码clone路径
     * Required:true
     */
    @Required
    private String codeRepoUrl;

    /**
     * 代码分支
     * Required:true
     */
    @Required
    private String codeRepoBranch;

    /**
     * 获取用户OSS库用，用户云存储路径用户云存储路径，如果为空，使用公用的云存储
     */
    private String ossPath;

    /**
     * 上传区域，用户云存储主机，实际为用户云存储所在地域
     * Required:true
     */
    @Required
    private String ossHost;

    /**
     * 获取用户OSS库用，用户云存储bucket，如果为空，使用公用的云存储
     */
    private String ossBucket;

    /**
     * 选择类型 和 运行版本 共同拼出此项，编译镜像地址
     * Required:true
     */
    @Required
    private String buildImage;

    /**
     * 构建规范，选择在源代码供目录中使用build.yml则为false，选择插入构建命令则为true，这项为true，则buildSetConfig需要有内容，如果这项为false，即使buildSetConfig有内容，也不生效
     */
    private Boolean isUserBuildSetConfig;

    /**
     * 插入构建命令，isUserBuildSetConfig选择true时，这项让用户填写内容，内容从接口/regions/{regionId}/jobs/default/buildSet 获取
     */
    private String buildSetConfig;

    /**
     * 超时时间，单位秒
     */
    private Integer buildTimeOut;

    /**
     * 计算类型中 cpu分配核数
     */
    private Integer buildResourceCpu;

    /**
     * 计算类型中 内存分配大小，单位MB
     */
    private Integer buildResourceMem;

    /**
     * 通知邮件
     */
    private String noticeMail;

    /**
     * 通知频率， MAIL_FAILED失败时通知，MAIL_EVERY每次构建就通知
     */
    private String noticeType;

    /**
     * 构建类型
     */
    private String compilerType;

    /**
     * 镜像注册表名
     */
    private String dockerRegistry;

    /**
     * 镜像仓库名
     */
    private String dockerRepository;

    /**
     * 注册表的URI
     */
    private String dockerRegistryUri;


    /**
     * get 项目名称
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set 项目名称
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * get 源提供商，代码存储类型代码存储类型， 目前只支持github
     *
     * @return
     */
    public String getCodeType() {
        return codeType;
    }

    /**
     * set 源提供商，代码存储类型代码存储类型， 目前只支持github
     *
     * @param codeType
     */
    public void setCodeType(String codeType) {
        this.codeType = codeType;
    }

    /**
     * get 仓库地址，代码clone路径
     *
     * @return
     */
    public String getCodeRepoUrl() {
        return codeRepoUrl;
    }

    /**
     * set 仓库地址，代码clone路径
     *
     * @param codeRepoUrl
     */
    public void setCodeRepoUrl(String codeRepoUrl) {
        this.codeRepoUrl = codeRepoUrl;
    }

    /**
     * get 代码分支
     *
     * @return
     */
    public String getCodeRepoBranch() {
        return codeRepoBranch;
    }

    /**
     * set 代码分支
     *
     * @param codeRepoBranch
     */
    public void setCodeRepoBranch(String codeRepoBranch) {
        this.codeRepoBranch = codeRepoBranch;
    }

    /**
     * get 获取用户OSS库用，用户云存储路径用户云存储路径，如果为空，使用公用的云存储
     *
     * @return
     */
    public String getOssPath() {
        return ossPath;
    }

    /**
     * set 获取用户OSS库用，用户云存储路径用户云存储路径，如果为空，使用公用的云存储
     *
     * @param ossPath
     */
    public void setOssPath(String ossPath) {
        this.ossPath = ossPath;
    }

    /**
     * get 上传区域，用户云存储主机，实际为用户云存储所在地域
     *
     * @return
     */
    public String getOssHost() {
        return ossHost;
    }

    /**
     * set 上传区域，用户云存储主机，实际为用户云存储所在地域
     *
     * @param ossHost
     */
    public void setOssHost(String ossHost) {
        this.ossHost = ossHost;
    }

    /**
     * get 获取用户OSS库用，用户云存储bucket，如果为空，使用公用的云存储
     *
     * @return
     */
    public String getOssBucket() {
        return ossBucket;
    }

    /**
     * set 获取用户OSS库用，用户云存储bucket，如果为空，使用公用的云存储
     *
     * @param ossBucket
     */
    public void setOssBucket(String ossBucket) {
        this.ossBucket = ossBucket;
    }

    /**
     * get 选择类型 和 运行版本 共同拼出此项，编译镜像地址
     *
     * @return
     */
    public String getBuildImage() {
        return buildImage;
    }

    /**
     * set 选择类型 和 运行版本 共同拼出此项，编译镜像地址
     *
     * @param buildImage
     */
    public void setBuildImage(String buildImage) {
        this.buildImage = buildImage;
    }

    /**
     * get 构建规范，选择在源代码供目录中使用build.yml则为false，选择插入构建命令则为true，这项为true，则buildSetConfig需要有内容，如果这项为false，即使buildSetConfig有内容，也不生效
     *
     * @return
     */
    public Boolean getIsUserBuildSetConfig() {
        return isUserBuildSetConfig;
    }

    /**
     * set 构建规范，选择在源代码供目录中使用build.yml则为false，选择插入构建命令则为true，这项为true，则buildSetConfig需要有内容，如果这项为false，即使buildSetConfig有内容，也不生效
     *
     * @param isUserBuildSetConfig
     */
    public void setIsUserBuildSetConfig(Boolean isUserBuildSetConfig) {
        this.isUserBuildSetConfig = isUserBuildSetConfig;
    }

    /**
     * get 插入构建命令，isUserBuildSetConfig选择true时，这项让用户填写内容，内容从接口/regions/{regionId}/jobs/default/buildSet 获取
     *
     * @return
     */
    public String getBuildSetConfig() {
        return buildSetConfig;
    }

    /**
     * set 插入构建命令，isUserBuildSetConfig选择true时，这项让用户填写内容，内容从接口/regions/{regionId}/jobs/default/buildSet 获取
     *
     * @param buildSetConfig
     */
    public void setBuildSetConfig(String buildSetConfig) {
        this.buildSetConfig = buildSetConfig;
    }

    /**
     * get 超时时间，单位秒
     *
     * @return
     */
    public Integer getBuildTimeOut() {
        return buildTimeOut;
    }

    /**
     * set 超时时间，单位秒
     *
     * @param buildTimeOut
     */
    public void setBuildTimeOut(Integer buildTimeOut) {
        this.buildTimeOut = buildTimeOut;
    }

    /**
     * get 计算类型中 cpu分配核数
     *
     * @return
     */
    public Integer getBuildResourceCpu() {
        return buildResourceCpu;
    }

    /**
     * set 计算类型中 cpu分配核数
     *
     * @param buildResourceCpu
     */
    public void setBuildResourceCpu(Integer buildResourceCpu) {
        this.buildResourceCpu = buildResourceCpu;
    }

    /**
     * get 计算类型中 内存分配大小，单位MB
     *
     * @return
     */
    public Integer getBuildResourceMem() {
        return buildResourceMem;
    }

    /**
     * set 计算类型中 内存分配大小，单位MB
     *
     * @param buildResourceMem
     */
    public void setBuildResourceMem(Integer buildResourceMem) {
        this.buildResourceMem = buildResourceMem;
    }

    /**
     * get 通知邮件
     *
     * @return
     */
    public String getNoticeMail() {
        return noticeMail;
    }

    /**
     * set 通知邮件
     *
     * @param noticeMail
     */
    public void setNoticeMail(String noticeMail) {
        this.noticeMail = noticeMail;
    }

    /**
     * get 通知频率， MAIL_FAILED失败时通知，MAIL_EVERY每次构建就通知
     *
     * @return
     */
    public String getNoticeType() {
        return noticeType;
    }

    /**
     * set 通知频率， MAIL_FAILED失败时通知，MAIL_EVERY每次构建就通知
     *
     * @param noticeType
     */
    public void setNoticeType(String noticeType) {
        this.noticeType = noticeType;
    }

    /**
     * get 构建类型
     *
     * @return
     */
    public String getCompilerType() {
        return compilerType;
    }

    /**
     * set 构建类型
     *
     * @param compilerType
     */
    public void setCompilerType(String compilerType) {
        this.compilerType = compilerType;
    }

    /**
     * get 镜像注册表名
     *
     * @return
     */
    public String getDockerRegistry() {
        return dockerRegistry;
    }

    /**
     * set 镜像注册表名
     *
     * @param dockerRegistry
     */
    public void setDockerRegistry(String dockerRegistry) {
        this.dockerRegistry = dockerRegistry;
    }

    /**
     * get 镜像仓库名
     *
     * @return
     */
    public String getDockerRepository() {
        return dockerRepository;
    }

    /**
     * set 镜像仓库名
     *
     * @param dockerRepository
     */
    public void setDockerRepository(String dockerRepository) {
        this.dockerRepository = dockerRepository;
    }

    /**
     * get 注册表的URI
     *
     * @return
     */
    public String getDockerRegistryUri() {
        return dockerRegistryUri;
    }

    /**
     * set 注册表的URI
     *
     * @param dockerRegistryUri
     */
    public void setDockerRegistryUri(String dockerRegistryUri) {
        this.dockerRegistryUri = dockerRegistryUri;
    }


    /**
     * set 项目名称
     *
     * @param name
     */
    public JobRequest name(String name) {
        this.name = name;
        return this;
    }

    /**
     * set 源提供商，代码存储类型代码存储类型， 目前只支持github
     *
     * @param codeType
     */
    public JobRequest codeType(String codeType) {
        this.codeType = codeType;
        return this;
    }

    /**
     * set 仓库地址，代码clone路径
     *
     * @param codeRepoUrl
     */
    public JobRequest codeRepoUrl(String codeRepoUrl) {
        this.codeRepoUrl = codeRepoUrl;
        return this;
    }

    /**
     * set 代码分支
     *
     * @param codeRepoBranch
     */
    public JobRequest codeRepoBranch(String codeRepoBranch) {
        this.codeRepoBranch = codeRepoBranch;
        return this;
    }

    /**
     * set 获取用户OSS库用，用户云存储路径用户云存储路径，如果为空，使用公用的云存储
     *
     * @param ossPath
     */
    public JobRequest ossPath(String ossPath) {
        this.ossPath = ossPath;
        return this;
    }

    /**
     * set 上传区域，用户云存储主机，实际为用户云存储所在地域
     *
     * @param ossHost
     */
    public JobRequest ossHost(String ossHost) {
        this.ossHost = ossHost;
        return this;
    }

    /**
     * set 获取用户OSS库用，用户云存储bucket，如果为空，使用公用的云存储
     *
     * @param ossBucket
     */
    public JobRequest ossBucket(String ossBucket) {
        this.ossBucket = ossBucket;
        return this;
    }

    /**
     * set 选择类型 和 运行版本 共同拼出此项，编译镜像地址
     *
     * @param buildImage
     */
    public JobRequest buildImage(String buildImage) {
        this.buildImage = buildImage;
        return this;
    }

    /**
     * set 构建规范，选择在源代码供目录中使用build.yml则为false，选择插入构建命令则为true，这项为true，则buildSetConfig需要有内容，如果这项为false，即使buildSetConfig有内容，也不生效
     *
     * @param isUserBuildSetConfig
     */
    public JobRequest isUserBuildSetConfig(Boolean isUserBuildSetConfig) {
        this.isUserBuildSetConfig = isUserBuildSetConfig;
        return this;
    }

    /**
     * set 插入构建命令，isUserBuildSetConfig选择true时，这项让用户填写内容，内容从接口/regions/{regionId}/jobs/default/buildSet 获取
     *
     * @param buildSetConfig
     */
    public JobRequest buildSetConfig(String buildSetConfig) {
        this.buildSetConfig = buildSetConfig;
        return this;
    }

    /**
     * set 超时时间，单位秒
     *
     * @param buildTimeOut
     */
    public JobRequest buildTimeOut(Integer buildTimeOut) {
        this.buildTimeOut = buildTimeOut;
        return this;
    }

    /**
     * set 计算类型中 cpu分配核数
     *
     * @param buildResourceCpu
     */
    public JobRequest buildResourceCpu(Integer buildResourceCpu) {
        this.buildResourceCpu = buildResourceCpu;
        return this;
    }

    /**
     * set 计算类型中 内存分配大小，单位MB
     *
     * @param buildResourceMem
     */
    public JobRequest buildResourceMem(Integer buildResourceMem) {
        this.buildResourceMem = buildResourceMem;
        return this;
    }

    /**
     * set 通知邮件
     *
     * @param noticeMail
     */
    public JobRequest noticeMail(String noticeMail) {
        this.noticeMail = noticeMail;
        return this;
    }

    /**
     * set 通知频率， MAIL_FAILED失败时通知，MAIL_EVERY每次构建就通知
     *
     * @param noticeType
     */
    public JobRequest noticeType(String noticeType) {
        this.noticeType = noticeType;
        return this;
    }

    /**
     * set 构建类型
     *
     * @param compilerType
     */
    public JobRequest compilerType(String compilerType) {
        this.compilerType = compilerType;
        return this;
    }

    /**
     * set 镜像注册表名
     *
     * @param dockerRegistry
     */
    public JobRequest dockerRegistry(String dockerRegistry) {
        this.dockerRegistry = dockerRegistry;
        return this;
    }

    /**
     * set 镜像仓库名
     *
     * @param dockerRepository
     */
    public JobRequest dockerRepository(String dockerRepository) {
        this.dockerRepository = dockerRepository;
        return this;
    }

    /**
     * set 注册表的URI
     *
     * @param dockerRegistryUri
     */
    public JobRequest dockerRegistryUri(String dockerRegistryUri) {
        this.dockerRegistryUri = dockerRegistryUri;
        return this;
    }


}