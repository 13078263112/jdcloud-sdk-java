/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 云编译
 * 云编译相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.compile.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.compile.model.GetJobRequest;
import com.jdcloud.sdk.service.compile.model.GetJobResponse;
import com.jdcloud.sdk.service.compile.client.GetJobExecutor;
import com.jdcloud.sdk.service.compile.model.StartJobRequest;
import com.jdcloud.sdk.service.compile.model.StartJobResponse;
import com.jdcloud.sdk.service.compile.client.StartJobExecutor;
import com.jdcloud.sdk.service.compile.model.GetExternalLinkRequest;
import com.jdcloud.sdk.service.compile.model.GetExternalLinkResponse;
import com.jdcloud.sdk.service.compile.client.GetExternalLinkExecutor;
import com.jdcloud.sdk.service.compile.model.StopBuildRequest;
import com.jdcloud.sdk.service.compile.model.StopBuildResponse;
import com.jdcloud.sdk.service.compile.client.StopBuildExecutor;
import com.jdcloud.sdk.service.compile.model.CreateDemoRequest;
import com.jdcloud.sdk.service.compile.model.CreateDemoResponse;
import com.jdcloud.sdk.service.compile.client.CreateDemoExecutor;
import com.jdcloud.sdk.service.compile.model.GetJobsRequest;
import com.jdcloud.sdk.service.compile.model.GetJobsResponse;
import com.jdcloud.sdk.service.compile.client.GetJobsExecutor;
import com.jdcloud.sdk.service.compile.model.DeleteJobRequest;
import com.jdcloud.sdk.service.compile.model.DeleteJobResponse;
import com.jdcloud.sdk.service.compile.client.DeleteJobExecutor;
import com.jdcloud.sdk.service.compile.model.UpdateJobRequest;
import com.jdcloud.sdk.service.compile.model.UpdateJobResponse;
import com.jdcloud.sdk.service.compile.client.UpdateJobExecutor;
import com.jdcloud.sdk.service.compile.model.GetBuildLogRequest;
import com.jdcloud.sdk.service.compile.model.GetBuildLogResponse;
import com.jdcloud.sdk.service.compile.client.GetBuildLogExecutor;
import com.jdcloud.sdk.service.compile.model.CreateJobRequest;
import com.jdcloud.sdk.service.compile.model.CreateJobResponse;
import com.jdcloud.sdk.service.compile.client.CreateJobExecutor;
import com.jdcloud.sdk.service.compile.model.DeleteJobsRequest;
import com.jdcloud.sdk.service.compile.model.DeleteJobsResponse;
import com.jdcloud.sdk.service.compile.client.DeleteJobsExecutor;
import com.jdcloud.sdk.service.compile.model.GetBuildStatusRequest;
import com.jdcloud.sdk.service.compile.model.GetBuildStatusResponse;
import com.jdcloud.sdk.service.compile.client.GetBuildStatusExecutor;

/**
 * compileClient
 */
public class CompileClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.1.1";
    public final static String DefaultEndpoint = "compile.jdcloud-api.com";
    public final static String ServiceName = "compile";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private CompileClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 根据id获取构建任务的配置信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetJobResponse getJob(GetJobRequest request) throws JdcloudSdkException {
        return new GetJobExecutor().client(this).execute(request);
    }

    /**
     * 根据id启动一个编译任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StartJobResponse startJob(StartJobRequest request) throws JdcloudSdkException {
        return new StartJobExecutor().client(this).execute(request);
    }

    /**
     * 生成带有效期的包地址
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetExternalLinkResponse getExternalLink(GetExternalLinkRequest request) throws JdcloudSdkException {
        return new GetExternalLinkExecutor().client(this).execute(request);
    }

    /**
     * 停止构建任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public StopBuildResponse stopBuild(StopBuildRequest request) throws JdcloudSdkException {
        return new StopBuildExecutor().client(this).execute(request);
    }

    /**
     * 创建Demo
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateDemoResponse createDemo(CreateDemoRequest request) throws JdcloudSdkException {
        return new CreateDemoExecutor().client(this).execute(request);
    }

    /**
     * 查询获取编译任务列表，并显示最后一次编译的一些信息
/v2/regions/cn-south-1/jobs/?sorts.1.name&#x3D;status&amp;sorts.1.direction&#x3D;asc&amp;pageNumber&#x3D;1&amp;pageSize&#x3D;10&amp;filters.1.name&#x3D;name&amp;filters.1.values.1&#x3D;我的job

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetJobsResponse getJobs(GetJobsRequest request) throws JdcloudSdkException {
        return new GetJobsExecutor().client(this).execute(request);
    }

    /**
     * 删除一个编译任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteJobResponse deleteJob(DeleteJobRequest request) throws JdcloudSdkException {
        return new DeleteJobExecutor().client(this).execute(request);
    }

    /**
     * 更新编译任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public UpdateJobResponse updateJob(UpdateJobRequest request) throws JdcloudSdkException {
        return new UpdateJobExecutor().client(this).execute(request);
    }

    /**
     * 查询构建任务执行日志
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetBuildLogResponse getBuildLog(GetBuildLogRequest request) throws JdcloudSdkException {
        return new GetBuildLogExecutor().client(this).execute(request);
    }

    /**
     * 新建构建任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateJobResponse createJob(CreateJobRequest request) throws JdcloudSdkException {
        return new CreateJobExecutor().client(this).execute(request);
    }

    /**
     * 批量删除编译任务
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteJobsResponse deleteJobs(DeleteJobsRequest request) throws JdcloudSdkException {
        return new DeleteJobsExecutor().client(this).execute(request);
    }

    /**
     * 查询构建任务执行的状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetBuildStatusResponse getBuildStatus(GetBuildStatusRequest request) throws JdcloudSdkException {
        return new GetBuildStatusExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public CompileClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private CompileClient compileClient;

        public DefaultBuilder() {
            compileClient = new CompileClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            compileClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            compileClient.httpRequestConfig = config;
            return this;
        }

        public CompileClient build() throws JdcloudSdkException {

            if (compileClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                compileClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (compileClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("CompileClient build error: jdcloud credentials provider not set");
                }
            }
            if (compileClient.httpRequestConfig == null) {
                compileClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (compileClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("CompileClient build error: http request config not set");
                }
            }
            return compileClient;
        }

        public Builder environment(Environment environment) {
            compileClient.environment = environment;
            return this;
        }
    }
}
