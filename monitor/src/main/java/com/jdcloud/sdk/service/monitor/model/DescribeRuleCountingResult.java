/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Overview APIs
 * 概览页相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.monitor.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * 概览页规则统计接口
 */
public class DescribeRuleCountingResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 处于报警状态的规则个数  status:2
     */
    private Long alarmRuleCount;

    /**
     * 未启用的规则 数量
     */
    private Long disableRuleCount;

    /**
     * 处于正常状态的规则个数  status：1
     */
    private Long normalRuleCount;

    /**
     * serviceCodes
     */
    private List<String> serviceCodes;

    /**
     * 默认为true，当使用主子帐号功能，且用户没有任何规则的权限时，为false
     */
    private Boolean subUserPermission;

    /**
     * 监控规则 总数
     */
    private Long totalRuleCount;

    /**
     * 处于数据不足状态的规则 个数  status:4
     */
    private Long unknownRuleCount;


    /**
     * get 处于报警状态的规则个数  status:2
     *
     * @return
     */
    public Long getAlarmRuleCount() {
        return alarmRuleCount;
    }

    /**
     * set 处于报警状态的规则个数  status:2
     *
     * @param alarmRuleCount
     */
    public void setAlarmRuleCount(Long alarmRuleCount) {
        this.alarmRuleCount = alarmRuleCount;
    }

    /**
     * get 未启用的规则 数量
     *
     * @return
     */
    public Long getDisableRuleCount() {
        return disableRuleCount;
    }

    /**
     * set 未启用的规则 数量
     *
     * @param disableRuleCount
     */
    public void setDisableRuleCount(Long disableRuleCount) {
        this.disableRuleCount = disableRuleCount;
    }

    /**
     * get 处于正常状态的规则个数  status：1
     *
     * @return
     */
    public Long getNormalRuleCount() {
        return normalRuleCount;
    }

    /**
     * set 处于正常状态的规则个数  status：1
     *
     * @param normalRuleCount
     */
    public void setNormalRuleCount(Long normalRuleCount) {
        this.normalRuleCount = normalRuleCount;
    }

    /**
     * get serviceCodes
     *
     * @return
     */
    public List<String> getServiceCodes() {
        return serviceCodes;
    }

    /**
     * set serviceCodes
     *
     * @param serviceCodes
     */
    public void setServiceCodes(List<String> serviceCodes) {
        this.serviceCodes = serviceCodes;
    }

    /**
     * get 默认为true，当使用主子帐号功能，且用户没有任何规则的权限时，为false
     *
     * @return
     */
    public Boolean getSubUserPermission() {
        return subUserPermission;
    }

    /**
     * set 默认为true，当使用主子帐号功能，且用户没有任何规则的权限时，为false
     *
     * @param subUserPermission
     */
    public void setSubUserPermission(Boolean subUserPermission) {
        this.subUserPermission = subUserPermission;
    }

    /**
     * get 监控规则 总数
     *
     * @return
     */
    public Long getTotalRuleCount() {
        return totalRuleCount;
    }

    /**
     * set 监控规则 总数
     *
     * @param totalRuleCount
     */
    public void setTotalRuleCount(Long totalRuleCount) {
        this.totalRuleCount = totalRuleCount;
    }

    /**
     * get 处于数据不足状态的规则 个数  status:4
     *
     * @return
     */
    public Long getUnknownRuleCount() {
        return unknownRuleCount;
    }

    /**
     * set 处于数据不足状态的规则 个数  status:4
     *
     * @param unknownRuleCount
     */
    public void setUnknownRuleCount(Long unknownRuleCount) {
        this.unknownRuleCount = unknownRuleCount;
    }


    /**
     * set 处于报警状态的规则个数  status:2
     *
     * @param alarmRuleCount
     */
    public DescribeRuleCountingResult alarmRuleCount(Long alarmRuleCount) {
        this.alarmRuleCount = alarmRuleCount;
        return this;
    }

    /**
     * set 未启用的规则 数量
     *
     * @param disableRuleCount
     */
    public DescribeRuleCountingResult disableRuleCount(Long disableRuleCount) {
        this.disableRuleCount = disableRuleCount;
        return this;
    }

    /**
     * set 处于正常状态的规则个数  status：1
     *
     * @param normalRuleCount
     */
    public DescribeRuleCountingResult normalRuleCount(Long normalRuleCount) {
        this.normalRuleCount = normalRuleCount;
        return this;
    }

    /**
     * set serviceCodes
     *
     * @param serviceCodes
     */
    public DescribeRuleCountingResult serviceCodes(List<String> serviceCodes) {
        this.serviceCodes = serviceCodes;
        return this;
    }

    /**
     * set 默认为true，当使用主子帐号功能，且用户没有任何规则的权限时，为false
     *
     * @param subUserPermission
     */
    public DescribeRuleCountingResult subUserPermission(Boolean subUserPermission) {
        this.subUserPermission = subUserPermission;
        return this;
    }

    /**
     * set 监控规则 总数
     *
     * @param totalRuleCount
     */
    public DescribeRuleCountingResult totalRuleCount(Long totalRuleCount) {
        this.totalRuleCount = totalRuleCount;
        return this;
    }

    /**
     * set 处于数据不足状态的规则 个数  status:4
     *
     * @param unknownRuleCount
     */
    public DescribeRuleCountingResult unknownRuleCount(Long unknownRuleCount) {
        this.unknownRuleCount = unknownRuleCount;
        return this;
    }


    /**
     * add item to serviceCodes
     *
     * @param serviceCode
     */
    public void addServiceCode(String serviceCode) {
        if (this.serviceCodes == null) {
            this.serviceCodes = new ArrayList<>();
        }
        this.serviceCodes.add(serviceCode);
    }

}