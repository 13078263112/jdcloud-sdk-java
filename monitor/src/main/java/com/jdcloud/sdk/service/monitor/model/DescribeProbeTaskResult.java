/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Availability Monitoring APIs
 * 可用性监控相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.monitor.model;

import java.util.List;
import java.util.ArrayList;
import com.jdcloud.sdk.service.monitor.model.Probe;
import com.jdcloud.sdk.service.monitor.model.KeyValue;
import com.jdcloud.sdk.service.JdcloudResult;

/**
 * 查询可用性监控任务
 */
public class DescribeProbeTaskResult extends JdcloudResult implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * probes
     */
    private List<Probe> probes;

    /**
     * 探测地址
     */
    private String address;

    /**
     * 创建时间
     */
    private String createTime;

    /**
     * 是否被删除
     */
    private Boolean deleted;

    /**
     * 是否启用
     */
    private Boolean enable;

    /**
     * 探测频率，单位秒
     */
    private Long frequency;

    /**
     * http探测的body
     */
    private String httpBody;

    /**
     * httpCookie
     */
    private List<KeyValue> httpCookie;

    /**
     * httpHeader
     */
    private List<KeyValue> httpHeader;

    /**
     * http探测方式
     */
    private Long httpType;

    /**
     * 探测任务 名称
     */
    private String name;

    /**
     * pin
     */
    private String pin;

    /**
     * 探测端口
     */
    private Long port;

    /**
     * 探测类型1:http、2:telnet
     */
    private Long probeType;

    /**
     * 探测对象的uid(http探测方法无uid)
     */
    private String targetId;

    /**
     * 探测对象所在region，redis或RDS所在region
     */
    private String targetRegion;

    /**
     * 探测任务 id
     */
    private String taskId;

    /**
     * 任务类型、1:url/ip、2:RDS、3:redis
     */
    private Long taskType;

    /**
     * 探测超时时间，单位秒
     */
    private Long timeout;

    /**
     * 更新时间
     */
    private String updateTime;


    /**
     * get probes
     *
     * @return
     */
    public List<Probe> getProbes() {
        return probes;
    }

    /**
     * set probes
     *
     * @param probes
     */
    public void setProbes(List<Probe> probes) {
        this.probes = probes;
    }

    /**
     * get 探测地址
     *
     * @return
     */
    public String getAddress() {
        return address;
    }

    /**
     * set 探测地址
     *
     * @param address
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * get 创建时间
     *
     * @return
     */
    public String getCreateTime() {
        return createTime;
    }

    /**
     * set 创建时间
     *
     * @param createTime
     */
    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }

    /**
     * get 是否被删除
     *
     * @return
     */
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * set 是否被删除
     *
     * @param deleted
     */
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * get 是否启用
     *
     * @return
     */
    public Boolean getEnable() {
        return enable;
    }

    /**
     * set 是否启用
     *
     * @param enable
     */
    public void setEnable(Boolean enable) {
        this.enable = enable;
    }

    /**
     * get 探测频率，单位秒
     *
     * @return
     */
    public Long getFrequency() {
        return frequency;
    }

    /**
     * set 探测频率，单位秒
     *
     * @param frequency
     */
    public void setFrequency(Long frequency) {
        this.frequency = frequency;
    }

    /**
     * get http探测的body
     *
     * @return
     */
    public String getHttpBody() {
        return httpBody;
    }

    /**
     * set http探测的body
     *
     * @param httpBody
     */
    public void setHttpBody(String httpBody) {
        this.httpBody = httpBody;
    }

    /**
     * get httpCookie
     *
     * @return
     */
    public List<KeyValue> getHttpCookie() {
        return httpCookie;
    }

    /**
     * set httpCookie
     *
     * @param httpCookie
     */
    public void setHttpCookie(List<KeyValue> httpCookie) {
        this.httpCookie = httpCookie;
    }

    /**
     * get httpHeader
     *
     * @return
     */
    public List<KeyValue> getHttpHeader() {
        return httpHeader;
    }

    /**
     * set httpHeader
     *
     * @param httpHeader
     */
    public void setHttpHeader(List<KeyValue> httpHeader) {
        this.httpHeader = httpHeader;
    }

    /**
     * get http探测方式
     *
     * @return
     */
    public Long getHttpType() {
        return httpType;
    }

    /**
     * set http探测方式
     *
     * @param httpType
     */
    public void setHttpType(Long httpType) {
        this.httpType = httpType;
    }

    /**
     * get 探测任务 名称
     *
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * set 探测任务 名称
     *
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * get pin
     *
     * @return
     */
    public String getPin() {
        return pin;
    }

    /**
     * set pin
     *
     * @param pin
     */
    public void setPin(String pin) {
        this.pin = pin;
    }

    /**
     * get 探测端口
     *
     * @return
     */
    public Long getPort() {
        return port;
    }

    /**
     * set 探测端口
     *
     * @param port
     */
    public void setPort(Long port) {
        this.port = port;
    }

    /**
     * get 探测类型1:http、2:telnet
     *
     * @return
     */
    public Long getProbeType() {
        return probeType;
    }

    /**
     * set 探测类型1:http、2:telnet
     *
     * @param probeType
     */
    public void setProbeType(Long probeType) {
        this.probeType = probeType;
    }

    /**
     * get 探测对象的uid(http探测方法无uid)
     *
     * @return
     */
    public String getTargetId() {
        return targetId;
    }

    /**
     * set 探测对象的uid(http探测方法无uid)
     *
     * @param targetId
     */
    public void setTargetId(String targetId) {
        this.targetId = targetId;
    }

    /**
     * get 探测对象所在region，redis或RDS所在region
     *
     * @return
     */
    public String getTargetRegion() {
        return targetRegion;
    }

    /**
     * set 探测对象所在region，redis或RDS所在region
     *
     * @param targetRegion
     */
    public void setTargetRegion(String targetRegion) {
        this.targetRegion = targetRegion;
    }

    /**
     * get 探测任务 id
     *
     * @return
     */
    public String getTaskId() {
        return taskId;
    }

    /**
     * set 探测任务 id
     *
     * @param taskId
     */
    public void setTaskId(String taskId) {
        this.taskId = taskId;
    }

    /**
     * get 任务类型、1:url/ip、2:RDS、3:redis
     *
     * @return
     */
    public Long getTaskType() {
        return taskType;
    }

    /**
     * set 任务类型、1:url/ip、2:RDS、3:redis
     *
     * @param taskType
     */
    public void setTaskType(Long taskType) {
        this.taskType = taskType;
    }

    /**
     * get 探测超时时间，单位秒
     *
     * @return
     */
    public Long getTimeout() {
        return timeout;
    }

    /**
     * set 探测超时时间，单位秒
     *
     * @param timeout
     */
    public void setTimeout(Long timeout) {
        this.timeout = timeout;
    }

    /**
     * get 更新时间
     *
     * @return
     */
    public String getUpdateTime() {
        return updateTime;
    }

    /**
     * set 更新时间
     *
     * @param updateTime
     */
    public void setUpdateTime(String updateTime) {
        this.updateTime = updateTime;
    }


    /**
     * set probes
     *
     * @param probes
     */
    public DescribeProbeTaskResult probes(List<Probe> probes) {
        this.probes = probes;
        return this;
    }

    /**
     * set 探测地址
     *
     * @param address
     */
    public DescribeProbeTaskResult address(String address) {
        this.address = address;
        return this;
    }

    /**
     * set 创建时间
     *
     * @param createTime
     */
    public DescribeProbeTaskResult createTime(String createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * set 是否被删除
     *
     * @param deleted
     */
    public DescribeProbeTaskResult deleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }

    /**
     * set 是否启用
     *
     * @param enable
     */
    public DescribeProbeTaskResult enable(Boolean enable) {
        this.enable = enable;
        return this;
    }

    /**
     * set 探测频率，单位秒
     *
     * @param frequency
     */
    public DescribeProbeTaskResult frequency(Long frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * set http探测的body
     *
     * @param httpBody
     */
    public DescribeProbeTaskResult httpBody(String httpBody) {
        this.httpBody = httpBody;
        return this;
    }

    /**
     * set httpCookie
     *
     * @param httpCookie
     */
    public DescribeProbeTaskResult httpCookie(List<KeyValue> httpCookie) {
        this.httpCookie = httpCookie;
        return this;
    }

    /**
     * set httpHeader
     *
     * @param httpHeader
     */
    public DescribeProbeTaskResult httpHeader(List<KeyValue> httpHeader) {
        this.httpHeader = httpHeader;
        return this;
    }

    /**
     * set http探测方式
     *
     * @param httpType
     */
    public DescribeProbeTaskResult httpType(Long httpType) {
        this.httpType = httpType;
        return this;
    }

    /**
     * set 探测任务 名称
     *
     * @param name
     */
    public DescribeProbeTaskResult name(String name) {
        this.name = name;
        return this;
    }

    /**
     * set pin
     *
     * @param pin
     */
    public DescribeProbeTaskResult pin(String pin) {
        this.pin = pin;
        return this;
    }

    /**
     * set 探测端口
     *
     * @param port
     */
    public DescribeProbeTaskResult port(Long port) {
        this.port = port;
        return this;
    }

    /**
     * set 探测类型1:http、2:telnet
     *
     * @param probeType
     */
    public DescribeProbeTaskResult probeType(Long probeType) {
        this.probeType = probeType;
        return this;
    }

    /**
     * set 探测对象的uid(http探测方法无uid)
     *
     * @param targetId
     */
    public DescribeProbeTaskResult targetId(String targetId) {
        this.targetId = targetId;
        return this;
    }

    /**
     * set 探测对象所在region，redis或RDS所在region
     *
     * @param targetRegion
     */
    public DescribeProbeTaskResult targetRegion(String targetRegion) {
        this.targetRegion = targetRegion;
        return this;
    }

    /**
     * set 探测任务 id
     *
     * @param taskId
     */
    public DescribeProbeTaskResult taskId(String taskId) {
        this.taskId = taskId;
        return this;
    }

    /**
     * set 任务类型、1:url/ip、2:RDS、3:redis
     *
     * @param taskType
     */
    public DescribeProbeTaskResult taskType(Long taskType) {
        this.taskType = taskType;
        return this;
    }

    /**
     * set 探测超时时间，单位秒
     *
     * @param timeout
     */
    public DescribeProbeTaskResult timeout(Long timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * set 更新时间
     *
     * @param updateTime
     */
    public DescribeProbeTaskResult updateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }


    /**
     * add item to probes
     *
     * @param probe
     */
    public void addProbe(Probe probe) {
        if (this.probes == null) {
            this.probes = new ArrayList<>();
        }
        this.probes.add(probe);
    }

    /**
     * add item to httpCookie
     *
     * @param httpCookie
     */
    public void addHttpCookie(KeyValue httpCookie) {
        if (this.httpCookie == null) {
            this.httpCookie = new ArrayList<>();
        }
        this.httpCookie.add(httpCookie);
    }

    /**
     * add item to httpHeader
     *
     * @param httpHeader
     */
    public void addHttpHeader(KeyValue httpHeader) {
        if (this.httpHeader == null) {
            this.httpHeader = new ArrayList<>();
        }
        this.httpHeader.add(httpHeader);
    }

}