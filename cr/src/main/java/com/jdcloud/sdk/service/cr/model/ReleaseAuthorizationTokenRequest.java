/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Authentication
 * 用户认证相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.cr.model;

import com.jdcloud.sdk.annotation.Required;
import com.jdcloud.sdk.service.JdcloudRequest;

/**
 * 释放用户 registry 的 token。

 */
public class ReleaseAuthorizationTokenRequest extends JdcloudRequest implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 准备释放的 token ID，功能为指定token释放。
     */
    private String authorizationToken;

    /**
     * true 表示强制删除用户当前registry下所有有效token的标志；false 表示删除所有有效token。
     */
    private Boolean forceAll;

    /**
     * 地域 ID
     * Required:true
     */
    @Required
    private String regionId;

    /**
     * 注册表名称
     * Required:true
     */
    @Required
    private String registryName;


    /**
     * get 准备释放的 token ID，功能为指定token释放。
     *
     * @return
     */
    public String getAuthorizationToken() {
        return authorizationToken;
    }

    /**
     * set 准备释放的 token ID，功能为指定token释放。
     *
     * @param authorizationToken
     */
    public void setAuthorizationToken(String authorizationToken) {
        this.authorizationToken = authorizationToken;
    }

    /**
     * get true 表示强制删除用户当前registry下所有有效token的标志；false 表示删除所有有效token。
     *
     * @return
     */
    public Boolean getForceAll() {
        return forceAll;
    }

    /**
     * set true 表示强制删除用户当前registry下所有有效token的标志；false 表示删除所有有效token。
     *
     * @param forceAll
     */
    public void setForceAll(Boolean forceAll) {
        this.forceAll = forceAll;
    }

    /**
     * get 地域 ID
     *
     * @return
     */
    public String getRegionId() {
        return regionId;
    }

    /**
     * set 地域 ID
     *
     * @param regionId
     */
    public void setRegionId(String regionId) {
        this.regionId = regionId;
    }

    /**
     * get 注册表名称
     *
     * @return
     */
    public String getRegistryName() {
        return registryName;
    }

    /**
     * set 注册表名称
     *
     * @param registryName
     */
    public void setRegistryName(String registryName) {
        this.registryName = registryName;
    }


    /**
     * set 准备释放的 token ID，功能为指定token释放。
     *
     * @param authorizationToken
     */
    public ReleaseAuthorizationTokenRequest authorizationToken(String authorizationToken) {
        this.authorizationToken = authorizationToken;
        return this;
    }

    /**
     * set true 表示强制删除用户当前registry下所有有效token的标志；false 表示删除所有有效token。
     *
     * @param forceAll
     */
    public ReleaseAuthorizationTokenRequest forceAll(Boolean forceAll) {
        this.forceAll = forceAll;
        return this;
    }

    /**
     * set 地域 ID
     *
     * @param regionId
     */
    public ReleaseAuthorizationTokenRequest regionId(String regionId) {
        this.regionId = regionId;
        return this;
    }

    /**
     * set 注册表名称
     *
     * @param registryName
     */
    public ReleaseAuthorizationTokenRequest registryName(String registryName) {
        this.registryName = registryName;
        return this;
    }


}